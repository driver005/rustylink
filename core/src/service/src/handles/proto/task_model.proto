//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0



syntax = "proto3" ;

service TaskModel { rpc Get (GetTaskModel) returns (ResponseTaskModel) ; rpc List (ListTaskModel) returns (ResponseTaskModel) ; rpc Create (CreateTaskModel) returns (ResponseTaskModel) ; rpc Update (UpdateTaskModel) returns (ResponseTaskModel) ; rpc Delete (DeleteTaskModel) returns (ResponseTaskModel) ; rpc Response (ResponseTaskModel) returns (ResponseTaskModel) ; }

message GetTaskModel { string task_id = 1 ; int32 task_type = 2 ; int32 status = 3 ; string reference_task_name = 4 ; optional int32 retry_count = 5 ; int32 seq = 6 ; optional string correlation_id = 7 ; int32 poll_count = 8 ; string task_def_name = 9 ; optional string task_config_id = 10 ; string scheduled_time = 11 ; string start_time = 12 ; optional string end_time = 13 ; optional string update_time = 14 ; int64 start_delay_in_seconds = 15 ; optional string retried_task_id = 16 ; bool retried = 17 ; bool executed = 18 ; bool callback_from_worker = 19 ; optional int64 response_timeout_seconds = 20 ; optional string workflow_instance_id = 21 ; optional string workflow_type = 22 ; optional string reason_for_incompletion = 23 ; int64 callback_after_seconds = 24 ; optional string worker_id = 25 ; optional string domain = 26 ; optional string input_message = 27 ; optional string output_message = 28 ; optional int32 rate_limit_per_frequency = 29 ; optional int32 rate_limit_frequency_in_seconds = 30 ; optional string external_input_payload_storage_path = 31 ; optional string external_output_payload_storage_path = 32 ; int32 workflow_priority = 33 ; optional string execution_name_space = 34 ; optional string isolation_group_id = 35 ; int32 iteration = 36 ; bool subworkflow_changed = 37 ; optional int64 wait_timeout = 38 ; }

message ListTaskModel { string task_id = 1 ; int32 task_type = 2 ; int32 status = 3 ; string reference_task_name = 4 ; optional int32 retry_count = 5 ; int32 seq = 6 ; optional string correlation_id = 7 ; int32 poll_count = 8 ; string task_def_name = 9 ; optional string task_config_id = 10 ; string scheduled_time = 11 ; string start_time = 12 ; optional string end_time = 13 ; optional string update_time = 14 ; int64 start_delay_in_seconds = 15 ; optional string retried_task_id = 16 ; bool retried = 17 ; bool executed = 18 ; bool callback_from_worker = 19 ; optional int64 response_timeout_seconds = 20 ; optional string workflow_instance_id = 21 ; optional string workflow_type = 22 ; optional string reason_for_incompletion = 23 ; int64 callback_after_seconds = 24 ; optional string worker_id = 25 ; optional string domain = 26 ; optional string input_message = 27 ; optional string output_message = 28 ; optional int32 rate_limit_per_frequency = 29 ; optional int32 rate_limit_frequency_in_seconds = 30 ; optional string external_input_payload_storage_path = 31 ; optional string external_output_payload_storage_path = 32 ; int32 workflow_priority = 33 ; optional string execution_name_space = 34 ; optional string isolation_group_id = 35 ; int32 iteration = 36 ; bool subworkflow_changed = 37 ; optional int64 wait_timeout = 38 ; }

message CreateTaskModel { int32 task_type = 1 ; int32 status = 2 ; string reference_task_name = 3 ; optional int32 retry_count = 4 ; int32 seq = 5 ; optional string correlation_id = 6 ; int32 poll_count = 7 ; string task_def_name = 8 ; optional string task_config_id = 9 ; string scheduled_time = 10 ; string start_time = 11 ; optional string end_time = 12 ; optional string update_time = 13 ; int64 start_delay_in_seconds = 14 ; optional string retried_task_id = 15 ; bool retried = 16 ; bool executed = 17 ; bool callback_from_worker = 18 ; optional int64 response_timeout_seconds = 19 ; optional string workflow_instance_id = 20 ; optional string workflow_type = 21 ; optional string reason_for_incompletion = 22 ; int64 callback_after_seconds = 23 ; optional string worker_id = 24 ; optional string domain = 25 ; optional string input_message = 26 ; optional string output_message = 27 ; optional int32 rate_limit_per_frequency = 28 ; optional int32 rate_limit_frequency_in_seconds = 29 ; optional string external_input_payload_storage_path = 30 ; optional string external_output_payload_storage_path = 31 ; int32 workflow_priority = 32 ; optional string execution_name_space = 33 ; optional string isolation_group_id = 34 ; int32 iteration = 35 ; bool subworkflow_changed = 36 ; optional int64 wait_timeout = 37 ; }

message UpdateTaskModel { int32 task_type = 1 ; int32 status = 2 ; string reference_task_name = 3 ; optional int32 retry_count = 4 ; int32 seq = 5 ; optional string correlation_id = 6 ; int32 poll_count = 7 ; string task_def_name = 8 ; optional string task_config_id = 9 ; string scheduled_time = 10 ; string start_time = 11 ; optional string end_time = 12 ; optional string update_time = 13 ; int64 start_delay_in_seconds = 14 ; optional string retried_task_id = 15 ; bool retried = 16 ; bool executed = 17 ; bool callback_from_worker = 18 ; optional int64 response_timeout_seconds = 19 ; optional string workflow_instance_id = 20 ; optional string workflow_type = 21 ; optional string reason_for_incompletion = 22 ; int64 callback_after_seconds = 23 ; optional string worker_id = 24 ; optional string domain = 25 ; optional string input_message = 26 ; optional string output_message = 27 ; optional int32 rate_limit_per_frequency = 28 ; optional int32 rate_limit_frequency_in_seconds = 29 ; optional string external_input_payload_storage_path = 30 ; optional string external_output_payload_storage_path = 31 ; int32 workflow_priority = 32 ; optional string execution_name_space = 33 ; optional string isolation_group_id = 34 ; int32 iteration = 35 ; bool subworkflow_changed = 36 ; optional int64 wait_timeout = 37 ; }

message DeleteTaskModel { string task_id = 1 ; }

message ResponseTaskModel { string task_id = 1 ; int32 task_type = 2 ; int32 status = 3 ; string reference_task_name = 4 ; optional int32 retry_count = 5 ; int32 seq = 6 ; optional string correlation_id = 7 ; int32 poll_count = 8 ; string task_def_name = 9 ; optional string task_config_id = 10 ; string scheduled_time = 11 ; string start_time = 12 ; optional string end_time = 13 ; optional string update_time = 14 ; int64 start_delay_in_seconds = 15 ; optional string retried_task_id = 16 ; bool retried = 17 ; bool executed = 18 ; bool callback_from_worker = 19 ; optional int64 response_timeout_seconds = 20 ; optional string workflow_instance_id = 21 ; optional string workflow_type = 22 ; optional string reason_for_incompletion = 23 ; int64 callback_after_seconds = 24 ; optional string worker_id = 25 ; optional string domain = 26 ; optional string input_message = 27 ; optional string output_message = 28 ; optional int32 rate_limit_per_frequency = 29 ; optional int32 rate_limit_frequency_in_seconds = 30 ; optional string external_input_payload_storage_path = 31 ; optional string external_output_payload_storage_path = 32 ; int32 workflow_priority = 33 ; optional string execution_name_space = 34 ; optional string isolation_group_id = 35 ; int32 iteration = 36 ; bool subworkflow_changed = 37 ; optional int64 wait_timeout = 38 ; }

enum EvaluatorType { Graaljs = 0 ; ValueParam = 1 ; }

enum ForkType { DifferentTask = 0 ; SameTask = 1 ; SameTaskSubWorkflow = 2 ; }

enum IdempotencyStrategy { Fail = 0 ; RunningExisting = 1 ; }

enum OperationType { Delete = 0 ; Insert = 1 ; Select = 2 ; Update = 3 ; }

enum RetryLogic { ExponentialBackoff = 0 ; Fixed = 1 ; LinearBackoff = 2 ; }

enum TaskStatus { Canceled = 0 ; Completed = 1 ; CompletedWithErrors = 2 ; Failed = 3 ; FailedWithTerminalError = 4 ; InProgress = 5 ; Scheduled = 6 ; Skipped = 7 ; TimedOut = 8 ; }

enum TaskTerminationStatus { Completed = 0 ; Failed = 1 ; Terminated = 2 ; }

enum TaskType { BuissnessRule = 0 ; DoWhile = 1 ; Dynamic = 2 ; Event = 3 ; ExclusiveJoin = 4 ; ForkJoin = 5 ; ForkJoinDynamic = 6 ; GetSignedJwt = 7 ; Http = 8 ; Human = 9 ; Inline = 10 ; Join = 11 ; JsonJqTransform = 12 ; KafkaPublish = 13 ; SetVariable = 14 ; Simple = 15 ; SqlTask = 16 ; StartWorkflow = 17 ; SubWorkflow = 18 ; Switch = 19 ; TerminateTask = 20 ; TerminateWorkflow = 21 ; UpdateSecret = 22 ; UpdateTask = 23 ; UserDefined = 24 ; Wait = 25 ; WaitForWebhook = 26 ; }

enum TimeoutPolicy { AlertOnly = 0 ; Retry = 1 ; TimedOutWf = 2 ; }