//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0



syntax = "proto3" ;

service GetSignedJwt { rpc Get (GetGetSignedJwt) returns (ResponseGetSignedJwt) ; rpc List (ListGetSignedJwt) returns (ResponseGetSignedJwt) ; rpc Create (CreateGetSignedJwt) returns (ResponseGetSignedJwt) ; rpc Update (UpdateGetSignedJwt) returns (ResponseGetSignedJwt) ; rpc Delete (DeleteGetSignedJwt) returns (ResponseGetSignedJwt) ; rpc Response (ResponseGetSignedJwt) returns (ResponseGetSignedJwt) ; }

message GetGetSignedJwt { string id = 1 ; string subject = 2 ; string issuer = 3 ; string private_key = 4 ; string private_key_id = 5 ; string audience = 6 ; int64 ttl_in_seconds = 7 ; string scopes = 8 ; string algorithm = 9 ; optional string task_model_id = 10 ; }

message ListGetSignedJwt { string id = 1 ; string subject = 2 ; string issuer = 3 ; string private_key = 4 ; string private_key_id = 5 ; string audience = 6 ; int64 ttl_in_seconds = 7 ; string scopes = 8 ; string algorithm = 9 ; optional string task_model_id = 10 ; }

message CreateGetSignedJwt { string subject = 1 ; string issuer = 2 ; string private_key = 3 ; string private_key_id = 4 ; string audience = 5 ; int64 ttl_in_seconds = 6 ; string scopes = 7 ; string algorithm = 8 ; optional string task_model_id = 9 ; }

message UpdateGetSignedJwt { string subject = 1 ; string issuer = 2 ; string private_key = 3 ; string private_key_id = 4 ; string audience = 5 ; int64 ttl_in_seconds = 6 ; string scopes = 7 ; string algorithm = 8 ; optional string task_model_id = 9 ; }

message DeleteGetSignedJwt { string id = 1 ; }

message ResponseGetSignedJwt { string id = 1 ; string subject = 2 ; string issuer = 3 ; string private_key = 4 ; string private_key_id = 5 ; string audience = 6 ; int64 ttl_in_seconds = 7 ; string scopes = 8 ; string algorithm = 9 ; optional string task_model_id = 10 ; }

enum EvaluatorType { Graaljs = 0 ; ValueParam = 1 ; }

enum ForkType { DifferentTask = 0 ; SameTask = 1 ; SameTaskSubWorkflow = 2 ; }

enum IdempotencyStrategy { Fail = 0 ; RunningExisting = 1 ; }

enum OperationType { Delete = 0 ; Insert = 1 ; Select = 2 ; Update = 3 ; }

enum RetryLogic { ExponentialBackoff = 0 ; Fixed = 1 ; LinearBackoff = 2 ; }

enum TaskStatus { Canceled = 0 ; Completed = 1 ; CompletedWithErrors = 2 ; Failed = 3 ; FailedWithTerminalError = 4 ; InProgress = 5 ; Scheduled = 6 ; Skipped = 7 ; TimedOut = 8 ; }

enum TaskTerminationStatus { Completed = 0 ; Failed = 1 ; Terminated = 2 ; }

enum TaskType { BuissnessRule = 0 ; DoWhile = 1 ; Dynamic = 2 ; Event = 3 ; ExclusiveJoin = 4 ; ForkJoin = 5 ; ForkJoinDynamic = 6 ; GetSignedJwt = 7 ; Http = 8 ; Human = 9 ; Inline = 10 ; Join = 11 ; JsonJqTransform = 12 ; KafkaPublish = 13 ; SetVariable = 14 ; Simple = 15 ; SqlTask = 16 ; StartWorkflow = 17 ; SubWorkflow = 18 ; Switch = 19 ; TerminateTask = 20 ; TerminateWorkflow = 21 ; UpdateSecret = 22 ; UpdateTask = 23 ; UserDefined = 24 ; Wait = 25 ; WaitForWebhook = 26 ; }

enum TimeoutPolicy { AlertOnly = 0 ; Retry = 1 ; TimedOutWf = 2 ; }