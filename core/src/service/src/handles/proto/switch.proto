//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0



syntax = "proto3" ;

service Switch { rpc Get (GetSwitch) returns (ResponseSwitch) ; rpc List (ListSwitch) returns (ResponseSwitch) ; rpc Create (CreateSwitch) returns (ResponseSwitch) ; rpc Update (UpdateSwitch) returns (ResponseSwitch) ; rpc Delete (DeleteSwitch) returns (ResponseSwitch) ; rpc Response (ResponseSwitch) returns (ResponseSwitch) ; }

message GetSwitch { string id = 1 ; int32 evaluator_type = 2 ; string expression = 3 ; string decision_cases = 4 ; optional string default_case = 5 ; repeated string task_ids = 6 ; optional string task_model_id = 7 ; }

message ListSwitch { string id = 1 ; int32 evaluator_type = 2 ; string expression = 3 ; string decision_cases = 4 ; optional string default_case = 5 ; repeated string task_ids = 6 ; optional string task_model_id = 7 ; }

message CreateSwitch { int32 evaluator_type = 1 ; string expression = 2 ; string decision_cases = 3 ; optional string default_case = 4 ; repeated string task_ids = 5 ; optional string task_model_id = 6 ; }

message UpdateSwitch { int32 evaluator_type = 1 ; string expression = 2 ; string decision_cases = 3 ; optional string default_case = 4 ; repeated string task_ids = 5 ; optional string task_model_id = 6 ; }

message DeleteSwitch { string id = 1 ; }

message ResponseSwitch { string id = 1 ; int32 evaluator_type = 2 ; string expression = 3 ; string decision_cases = 4 ; optional string default_case = 5 ; repeated string task_ids = 6 ; optional string task_model_id = 7 ; }

enum EvaluatorType { Graaljs = 0 ; ValueParam = 1 ; }

enum ForkType { DifferentTask = 0 ; SameTask = 1 ; SameTaskSubWorkflow = 2 ; }

enum IdempotencyStrategy { Fail = 0 ; RunningExisting = 1 ; }

enum OperationType { Delete = 0 ; Insert = 1 ; Select = 2 ; Update = 3 ; }

enum RetryLogic { ExponentialBackoff = 0 ; Fixed = 1 ; LinearBackoff = 2 ; }

enum TaskStatus { Canceled = 0 ; Completed = 1 ; CompletedWithErrors = 2 ; Failed = 3 ; FailedWithTerminalError = 4 ; InProgress = 5 ; Scheduled = 6 ; Skipped = 7 ; TimedOut = 8 ; }

enum TaskTerminationStatus { Completed = 0 ; Failed = 1 ; Terminated = 2 ; }

enum TaskType { BuissnessRule = 0 ; DoWhile = 1 ; Dynamic = 2 ; Event = 3 ; ExclusiveJoin = 4 ; ForkJoin = 5 ; ForkJoinDynamic = 6 ; GetSignedJwt = 7 ; Http = 8 ; Human = 9 ; Inline = 10 ; Join = 11 ; JsonJqTransform = 12 ; KafkaPublish = 13 ; SetVariable = 14 ; Simple = 15 ; SqlTask = 16 ; StartWorkflow = 17 ; SubWorkflow = 18 ; Switch = 19 ; TerminateTask = 20 ; TerminateWorkflow = 21 ; UpdateSecret = 22 ; UpdateTask = 23 ; UserDefined = 24 ; Wait = 25 ; WaitForWebhook = 26 ; }

enum TimeoutPolicy { AlertOnly = 0 ; Retry = 1 ; TimedOutWf = 2 ; }