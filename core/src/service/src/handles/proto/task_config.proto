//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0



syntax = "proto3" ;

service TaskConfig { rpc Get (GetTaskConfig) returns (ResponseTaskConfig) ; rpc List (ListTaskConfig) returns (ResponseTaskConfig) ; rpc Create (CreateTaskConfig) returns (ResponseTaskConfig) ; rpc Update (UpdateTaskConfig) returns (ResponseTaskConfig) ; rpc Delete (DeleteTaskConfig) returns (ResponseTaskConfig) ; rpc Response (ResponseTaskConfig) returns (ResponseTaskConfig) ; }

message GetTaskConfig { string id = 1 ; string name = 2 ; string task_reference_name = 3 ; int32 task_type = 4 ; optional string description = 5 ; bool optional = 6 ; string input_parameters = 7 ; bool async_complete = 8 ; int64 start_delay = 9 ; bool permissive = 10 ; optional string loop_condition = 11 ; optional string loop_over = 12 ; optional string dynamic_task_name_param = 13 ; optional string dynamic_fork_tasks_param = 14 ; optional string dynamic_fork_tasks_input_param_name = 15 ; optional string fork_tasks = 16 ; optional repeated string join_on = 17 ; optional string join_status = 18 ; optional string sub_workflow_param = 19 ; optional string decision_cases = 20 ; optional string default_case = 21 ; optional int32 evaluator_type = 22 ; optional string expression = 23 ; optional string sink = 24 ; optional bool trigger_failure_workflow = 25 ; optional string script_expression = 26 ; optional string task_definition = 27 ; optional bool rate_limited = 28 ; optional repeated string default_exclusive_join_task = 29 ; optional int32 retry_count = 30 ; optional string on_state_change = 31 ; optional string cache_config = 32 ; }

message ListTaskConfig { string id = 1 ; string name = 2 ; string task_reference_name = 3 ; int32 task_type = 4 ; optional string description = 5 ; bool optional = 6 ; string input_parameters = 7 ; bool async_complete = 8 ; int64 start_delay = 9 ; bool permissive = 10 ; optional string loop_condition = 11 ; optional string loop_over = 12 ; optional string dynamic_task_name_param = 13 ; optional string dynamic_fork_tasks_param = 14 ; optional string dynamic_fork_tasks_input_param_name = 15 ; optional string fork_tasks = 16 ; optional repeated string join_on = 17 ; optional string join_status = 18 ; optional string sub_workflow_param = 19 ; optional string decision_cases = 20 ; optional string default_case = 21 ; optional int32 evaluator_type = 22 ; optional string expression = 23 ; optional string sink = 24 ; optional bool trigger_failure_workflow = 25 ; optional string script_expression = 26 ; optional string task_definition = 27 ; optional bool rate_limited = 28 ; optional repeated string default_exclusive_join_task = 29 ; optional int32 retry_count = 30 ; optional string on_state_change = 31 ; optional string cache_config = 32 ; }

message CreateTaskConfig { string name = 1 ; string task_reference_name = 2 ; int32 task_type = 3 ; optional string description = 4 ; bool optional = 5 ; string input_parameters = 6 ; bool async_complete = 7 ; int64 start_delay = 8 ; bool permissive = 9 ; optional string loop_condition = 10 ; optional string loop_over = 11 ; optional string dynamic_task_name_param = 12 ; optional string dynamic_fork_tasks_param = 13 ; optional string dynamic_fork_tasks_input_param_name = 14 ; optional string fork_tasks = 15 ; optional repeated string join_on = 16 ; optional string join_status = 17 ; optional string sub_workflow_param = 18 ; optional string decision_cases = 19 ; optional string default_case = 20 ; optional int32 evaluator_type = 21 ; optional string expression = 22 ; optional string sink = 23 ; optional bool trigger_failure_workflow = 24 ; optional string script_expression = 25 ; optional string task_definition = 26 ; optional bool rate_limited = 27 ; optional repeated string default_exclusive_join_task = 28 ; optional int32 retry_count = 29 ; optional string on_state_change = 30 ; optional string cache_config = 31 ; }

message UpdateTaskConfig { string name = 1 ; string task_reference_name = 2 ; int32 task_type = 3 ; optional string description = 4 ; bool optional = 5 ; string input_parameters = 6 ; bool async_complete = 7 ; int64 start_delay = 8 ; bool permissive = 9 ; optional string loop_condition = 10 ; optional string loop_over = 11 ; optional string dynamic_task_name_param = 12 ; optional string dynamic_fork_tasks_param = 13 ; optional string dynamic_fork_tasks_input_param_name = 14 ; optional string fork_tasks = 15 ; optional repeated string join_on = 16 ; optional string join_status = 17 ; optional string sub_workflow_param = 18 ; optional string decision_cases = 19 ; optional string default_case = 20 ; optional int32 evaluator_type = 21 ; optional string expression = 22 ; optional string sink = 23 ; optional bool trigger_failure_workflow = 24 ; optional string script_expression = 25 ; optional string task_definition = 26 ; optional bool rate_limited = 27 ; optional repeated string default_exclusive_join_task = 28 ; optional int32 retry_count = 29 ; optional string on_state_change = 30 ; optional string cache_config = 31 ; }

message DeleteTaskConfig { string id = 1 ; }

message ResponseTaskConfig { string id = 1 ; string name = 2 ; string task_reference_name = 3 ; int32 task_type = 4 ; optional string description = 5 ; bool optional = 6 ; string input_parameters = 7 ; bool async_complete = 8 ; int64 start_delay = 9 ; bool permissive = 10 ; optional string loop_condition = 11 ; optional string loop_over = 12 ; optional string dynamic_task_name_param = 13 ; optional string dynamic_fork_tasks_param = 14 ; optional string dynamic_fork_tasks_input_param_name = 15 ; optional string fork_tasks = 16 ; optional repeated string join_on = 17 ; optional string join_status = 18 ; optional string sub_workflow_param = 19 ; optional string decision_cases = 20 ; optional string default_case = 21 ; optional int32 evaluator_type = 22 ; optional string expression = 23 ; optional string sink = 24 ; optional bool trigger_failure_workflow = 25 ; optional string script_expression = 26 ; optional string task_definition = 27 ; optional bool rate_limited = 28 ; optional repeated string default_exclusive_join_task = 29 ; optional int32 retry_count = 30 ; optional string on_state_change = 31 ; optional string cache_config = 32 ; }

enum EvaluatorType { Graaljs = 0 ; ValueParam = 1 ; }

enum ForkType { DifferentTask = 0 ; SameTask = 1 ; SameTaskSubWorkflow = 2 ; }

enum IdempotencyStrategy { Fail = 0 ; RunningExisting = 1 ; }

enum OperationType { Delete = 0 ; Insert = 1 ; Select = 2 ; Update = 3 ; }

enum RetryLogic { ExponentialBackoff = 0 ; Fixed = 1 ; LinearBackoff = 2 ; }

enum TaskStatus { Canceled = 0 ; Completed = 1 ; CompletedWithErrors = 2 ; Failed = 3 ; FailedWithTerminalError = 4 ; InProgress = 5 ; Scheduled = 6 ; Skipped = 7 ; TimedOut = 8 ; }

enum TaskTerminationStatus { Completed = 0 ; Failed = 1 ; Terminated = 2 ; }

enum TaskType { BuissnessRule = 0 ; DoWhile = 1 ; Dynamic = 2 ; Event = 3 ; ExclusiveJoin = 4 ; ForkJoin = 5 ; ForkJoinDynamic = 6 ; GetSignedJwt = 7 ; Http = 8 ; Human = 9 ; Inline = 10 ; Join = 11 ; JsonJqTransform = 12 ; KafkaPublish = 13 ; SetVariable = 14 ; Simple = 15 ; SqlTask = 16 ; StartWorkflow = 17 ; SubWorkflow = 18 ; Switch = 19 ; TerminateTask = 20 ; TerminateWorkflow = 21 ; UpdateSecret = 22 ; UpdateTask = 23 ; UserDefined = 24 ; Wait = 25 ; WaitForWebhook = 26 ; }

enum TimeoutPolicy { AlertOnly = 0 ; Retry = 1 ; TimedOutWf = 2 ; }