//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use super::sea_orm_active_enums::RetryLogic;
use super::sea_orm_active_enums::TimeoutPolicy;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "task_definition")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub name: String,
	pub description: Option<String>,
	pub retry_count: i32,
	pub timeout_seconds: Option<i64>,
	pub input_keys: Option<Vec<String>>,
	pub output_keys: Option<Vec<String>>,
	pub timeout_policy: TimeoutPolicy,
	pub retry_logic: RetryLogic,
	pub retry_delay_seconds: i32,
	pub response_timeout_seconds: i64,
	pub concurrent_exec_limit: Option<i32>,
	pub input_template: Option<Json>,
	pub rate_limit_per_frequency: Option<i32>,
	pub rate_limit_frequency_in_seconds: Option<i32>,
	pub isolation_group_id: Option<String>,
	pub execution_name_space: Option<String>,
	pub owner_email: Option<String>,
	pub poll_timeout_seconds: Option<i32>,
	pub backoff_scale_factor: i32,
	pub base_type: Option<String>,
	pub input_schema: Option<Json>,
	pub enforce_schema: bool,
	pub output_schema: Option<Json>,
	pub created_on: DateTimeWithTimeZone,
	pub created_by: Option<String>,
	pub modified_on: DateTimeWithTimeZone,
	pub modified_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::task_model::Entity")]
	TaskModel,
}

impl Related<super::task_model::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TaskModel.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, macros :: DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::task_model::Entity")]
	TaskModel,
}
