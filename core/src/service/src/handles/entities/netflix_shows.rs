//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "netflix_shows")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub show_id: String,
	#[sea_orm(column_type = "Text", nullable)]
	pub r#type: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub title: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub director: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub cast_members: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub country: Option<String>,
	pub date_added: Option<Date>,
	pub release_year: Option<i32>,
	#[sea_orm(column_type = "Text", nullable)]
	pub rating: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub duration: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub listed_in: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, macros :: DeriveRelatedEntity)]
pub enum RelatedEntity {}
