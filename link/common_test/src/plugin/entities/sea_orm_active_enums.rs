//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Copy, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_role_enum")]
pub enum UserRoleEnum {
	#[sea_orm(string_value = "admin")]
	Admin,
	#[sea_orm(string_value = "developer")]
	Developer,
	#[sea_orm(string_value = "member")]
	Member,
}
impl UserRoleEnum {
	pub fn from_i32(value: i32) -> Result<Self, actix_web::HttpResponse> {
		match value {
			0 => Ok(UserRoleEnum::Admin),
			1 => Ok(UserRoleEnum::Developer),
			2 => Ok(UserRoleEnum::Member),
			_ => Err(actix_web::HttpResponse::InternalServerError()
				.body("Failed to parse enum: UserRoleEnum")),
		}
	}
	pub fn to_i32(&self) -> i32 {
		match self {
			UserRoleEnum::Admin => 0,
			UserRoleEnum::Developer => 1,
			UserRoleEnum::Member => 2,
		}
	}
}
