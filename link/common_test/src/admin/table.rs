// This file is @generated by prost-build.
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTableRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTablesRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "2")]
    pub included_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub excluded_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub offset: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub include_columns: ::core::option::Option<bool>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrimaryKey {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTableRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub schema: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub rls_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub rls_forced: ::core::option::Option<bool>,
    #[prost(enumeration = "ReplicaIdentity", optional, tag = "6")]
    pub replica_identity: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub replica_identity_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub primary_keys: ::prost::alloc::vec::Vec<PrimaryKey>,
    #[prost(string, optional, tag = "9")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTablesRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub schema: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteTableRequest {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(bool, optional, tag = "2")]
    pub cascade: ::core::option::Option<bool>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTablePrivilegesRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "2")]
    pub included_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub excluded_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub offset: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GrantTablePrivilegesRequest {
    #[prost(int32, tag = "1")]
    pub relation_id: i32,
    #[prost(string, tag = "2")]
    pub grantee: ::prost::alloc::string::String,
    #[prost(enumeration = "super::core::PrivilegeType", optional, tag = "3")]
    pub privilege_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub is_grantable: ::core::option::Option<bool>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeTablePrivilegesRequest {
    #[prost(int32, tag = "1")]
    pub relation_id: i32,
    #[prost(string, tag = "2")]
    pub grantee: ::prost::alloc::string::String,
    #[prost(enumeration = "super::core::PrivilegeType", optional, tag = "3")]
    pub privilege_type: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TablePrivilegeResponce {
    #[prost(int32, tag = "1")]
    pub relation_id: i32,
    #[prost(string, tag = "2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "RelationKind", optional, tag = "4")]
    pub kind: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub privileges: ::prost::alloc::vec::Vec<super::core::Privilege>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableResponce {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub rls_enabled: bool,
    #[prost(bool, tag = "5")]
    pub rls_forced: bool,
    #[prost(enumeration = "ReplicaIdentity", optional, tag = "6")]
    pub replica_identity: ::core::option::Option<i32>,
    #[prost(int64, tag = "7")]
    pub bytes: i64,
    #[prost(string, tag = "8")]
    pub size: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub live_rows_estimate: i64,
    #[prost(int64, tag = "10")]
    pub dead_rows_estimate: i64,
    #[prost(string, optional, tag = "11")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "12")]
    pub columns: ::prost::alloc::vec::Vec<super::column::ColumnResponce>,
    #[prost(message, repeated, tag = "13")]
    pub primary_keys: ::prost::alloc::vec::Vec<PrimaryKeySchema>,
    #[prost(message, repeated, tag = "14")]
    pub relationships: ::prost::alloc::vec::Vec<RelationshipOldSchema>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrimaryKeySchema {
    #[prost(string, tag = "1")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub table_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub table_id: i32,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelationshipOldSchema {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub constraint_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub source_schema: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub source_table_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub source_column_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub target_table_schema: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub target_table_name: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub target_column_name: ::prost::alloc::string::String,
}
#[derive(sea_orm::EnumIter, sea_orm::DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReplicaIdentity {
    Default = 0,
    Index = 1,
    Full = 2,
    Nothing = 3,
}
impl ReplicaIdentity {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReplicaIdentity::Default => "DEFAULT",
            ReplicaIdentity::Index => "INDEX",
            ReplicaIdentity::Full => "FULL",
            ReplicaIdentity::Nothing => "NOTHING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEFAULT" => Some(Self::Default),
            "INDEX" => Some(Self::Index),
            "FULL" => Some(Self::Full),
            "NOTHING" => Some(Self::Nothing),
            _ => None,
        }
    }
}
#[derive(sea_orm::EnumIter, sea_orm::DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelationKind {
    Table = 0,
    View = 1,
    MaterializedView = 2,
    ForeignTable = 3,
    PartitionedTable = 4,
}
impl RelationKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RelationKind::Table => "TABLE",
            RelationKind::View => "VIEW",
            RelationKind::MaterializedView => "MATERIALIZED_VIEW",
            RelationKind::ForeignTable => "FOREIGN_TABLE",
            RelationKind::PartitionedTable => "PARTITIONED_TABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TABLE" => Some(Self::Table),
            "VIEW" => Some(Self::View),
            "MATERIALIZED_VIEW" => Some(Self::MaterializedView),
            "FOREIGN_TABLE" => Some(Self::ForeignTable),
            "PARTITIONED_TABLE" => Some(Self::PartitionedTable),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod table_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TableServer.
    #[async_trait]
    pub trait Table: Send + Sync + 'static {
        async fn get_tables(
            &self,
            request: tonic::Request<super::GetTablesRequest>,
        ) -> std::result::Result<tonic::Response<super::TableResponce>, tonic::Status>;
        async fn get_table(
            &self,
            request: tonic::Request<super::GetTableRequest>,
        ) -> std::result::Result<tonic::Response<super::TableResponce>, tonic::Status>;
        async fn update_table(
            &self,
            request: tonic::Request<super::UpdateTableRequest>,
        ) -> std::result::Result<tonic::Response<super::TableResponce>, tonic::Status>;
        async fn create_tables(
            &self,
            request: tonic::Request<super::CreateTablesRequest>,
        ) -> std::result::Result<tonic::Response<super::TableResponce>, tonic::Status>;
        async fn delete_table(
            &self,
            request: tonic::Request<super::DeleteTableRequest>,
        ) -> std::result::Result<tonic::Response<super::TableResponce>, tonic::Status>;
        async fn get_table_privileges(
            &self,
            request: tonic::Request<super::GetTablePrivilegesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TablePrivilegeResponce>,
            tonic::Status,
        >;
        async fn grant_table_privileges(
            &self,
            request: tonic::Request<super::GrantTablePrivilegesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TablePrivilegeResponce>,
            tonic::Status,
        >;
        async fn revoke_table_privileges(
            &self,
            request: tonic::Request<super::RevokeTablePrivilegesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TablePrivilegeResponce>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct TableServer<T: Table> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: Table> TableServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TableServer<T>
    where
        T: Table,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/table.Table/GetTables" => {
                    #[allow(non_camel_case_types)]
                    struct GetTablesSvc<T: Table>(pub Arc<T>);
                    impl<T: Table> tonic::server::UnaryService<super::GetTablesRequest>
                    for GetTablesSvc<T> {
                        type Response = super::TableResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTablesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::get_tables(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTablesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/GetTable" => {
                    #[allow(non_camel_case_types)]
                    struct GetTableSvc<T: Table>(pub Arc<T>);
                    impl<T: Table> tonic::server::UnaryService<super::GetTableRequest>
                    for GetTableSvc<T> {
                        type Response = super::TableResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::get_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/UpdateTable" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateTableSvc<T: Table>(pub Arc<T>);
                    impl<T: Table> tonic::server::UnaryService<super::UpdateTableRequest>
                    for UpdateTableSvc<T> {
                        type Response = super::TableResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::update_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/CreateTables" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTablesSvc<T: Table>(pub Arc<T>);
                    impl<
                        T: Table,
                    > tonic::server::UnaryService<super::CreateTablesRequest>
                    for CreateTablesSvc<T> {
                        type Response = super::TableResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTablesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::create_tables(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTablesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/DeleteTable" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteTableSvc<T: Table>(pub Arc<T>);
                    impl<T: Table> tonic::server::UnaryService<super::DeleteTableRequest>
                    for DeleteTableSvc<T> {
                        type Response = super::TableResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::delete_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/GetTablePrivileges" => {
                    #[allow(non_camel_case_types)]
                    struct GetTablePrivilegesSvc<T: Table>(pub Arc<T>);
                    impl<
                        T: Table,
                    > tonic::server::UnaryService<super::GetTablePrivilegesRequest>
                    for GetTablePrivilegesSvc<T> {
                        type Response = super::TablePrivilegeResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTablePrivilegesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::get_table_privileges(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTablePrivilegesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/GrantTablePrivileges" => {
                    #[allow(non_camel_case_types)]
                    struct GrantTablePrivilegesSvc<T: Table>(pub Arc<T>);
                    impl<
                        T: Table,
                    > tonic::server::UnaryService<super::GrantTablePrivilegesRequest>
                    for GrantTablePrivilegesSvc<T> {
                        type Response = super::TablePrivilegeResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GrantTablePrivilegesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::grant_table_privileges(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GrantTablePrivilegesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/table.Table/RevokeTablePrivileges" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeTablePrivilegesSvc<T: Table>(pub Arc<T>);
                    impl<
                        T: Table,
                    > tonic::server::UnaryService<super::RevokeTablePrivilegesRequest>
                    for RevokeTablePrivilegesSvc<T> {
                        type Response = super::TablePrivilegeResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeTablePrivilegesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Table>::revoke_table_privileges(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RevokeTablePrivilegesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Table> Clone for TableServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Table> tonic::server::NamedService for TableServer<T> {
        const NAME: &'static str = "table.Table";
    }
}
