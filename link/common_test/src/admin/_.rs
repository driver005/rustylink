// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BinaryFilterInput {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub eq: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub ne: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub gt: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub gte: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub lt: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub lte: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "9")]
    pub is_null: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "10")]
    pub is_not_null: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "11")]
    pub contains: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "12")]
    pub starts_with: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "13")]
    pub ends_with: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "14")]
    pub like: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "15")]
    pub not_like: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "16")]
    pub between: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "17")]
    pub not_between: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BooleanFilterInput {
    #[prost(bool, optional, tag = "1")]
    pub eq: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub ne: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub gt: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub gte: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub lt: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub lte: ::core::option::Option<bool>,
    #[prost(bool, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<bool>,
    #[prost(bool, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_null: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CursorInput {
    #[prost(string, optional, tag = "1")]
    pub cursor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, tag = "2")]
    pub limit: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleFilterInput {
    #[prost(double, optional, tag = "1")]
    pub eq: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub ne: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "3")]
    pub gt: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub gte: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "5")]
    pub lt: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "6")]
    pub lte: ::core::option::Option<f64>,
    #[prost(double, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<f64>,
    #[prost(double, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<f64>,
    #[prost(double, optional, tag = "9")]
    pub is_null: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<f64>,
    #[prost(double, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<f64>,
    #[prost(double, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FloatFilterInput {
    #[prost(float, optional, tag = "1")]
    pub eq: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub ne: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub gt: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub gte: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "5")]
    pub lt: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub lte: ::core::option::Option<f32>,
    #[prost(float, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, optional, tag = "9")]
    pub is_null: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<f32>,
    #[prost(float, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int32FilterInput {
    #[prost(int32, optional, tag = "1")]
    pub eq: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub ne: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub gt: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub gte: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub lt: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lte: ::core::option::Option<i32>,
    #[prost(int32, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "9")]
    pub is_null: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<i32>,
    #[prost(int32, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int64FilterInput {
    #[prost(int64, optional, tag = "1")]
    pub eq: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub ne: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub gt: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub gte: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub lt: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "6")]
    pub lte: ::core::option::Option<i64>,
    #[prost(int64, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, optional, tag = "9")]
    pub is_null: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<i64>,
    #[prost(int64, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OffsetInput {
    #[prost(uint64, tag = "1")]
    pub limit: u64,
    #[prost(uint64, tag = "2")]
    pub offset: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PageInfo {
    #[prost(bool, tag = "1")]
    pub has_previous_page: bool,
    #[prost(bool, tag = "2")]
    pub has_next_page: bool,
    #[prost(string, optional, tag = "3")]
    pub start_cursor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub end_cursor: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PageInput {
    #[prost(uint64, tag = "1")]
    pub limit: u64,
    #[prost(uint64, tag = "2")]
    pub page: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PaginationInfo {
    #[prost(uint64, tag = "1")]
    pub pages: u64,
    #[prost(uint64, tag = "2")]
    pub current: u64,
    #[prost(uint64, tag = "3")]
    pub offset: u64,
    #[prost(uint64, tag = "4")]
    pub total: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaginationInput {
    #[prost(message, optional, tag = "1")]
    pub cursor: ::core::option::Option<CursorInput>,
    #[prost(message, optional, tag = "2")]
    pub page: ::core::option::Option<PageInput>,
    #[prost(message, optional, tag = "3")]
    pub offset: ::core::option::Option<OffsetInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sint32FilterInput {
    #[prost(sint32, optional, tag = "1")]
    pub eq: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "2")]
    pub ne: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "3")]
    pub gt: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "4")]
    pub gte: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "5")]
    pub lt: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "6")]
    pub lte: ::core::option::Option<i32>,
    #[prost(sint32, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(sint32, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(sint32, optional, tag = "9")]
    pub is_null: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<i32>,
    #[prost(sint32, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<i32>,
    #[prost(sint32, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sint64FilterInput {
    #[prost(sint64, optional, tag = "1")]
    pub eq: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "2")]
    pub ne: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "3")]
    pub gt: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "4")]
    pub gte: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "5")]
    pub lt: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "6")]
    pub lte: ::core::option::Option<i64>,
    #[prost(sint64, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<i64>,
    #[prost(sint64, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<i64>,
    #[prost(sint64, optional, tag = "9")]
    pub is_null: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<i64>,
    #[prost(sint64, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<i64>,
    #[prost(sint64, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringFilterInput {
    #[prost(string, optional, tag = "1")]
    pub eq: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub ne: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub gt: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub gte: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub lt: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub lte: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub is_null: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub contains: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub starts_with: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub ends_with: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub like: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub not_like: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "16")]
    pub between: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "17")]
    pub not_between: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint32FilterInput {
    #[prost(uint32, optional, tag = "1")]
    pub eq: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub ne: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub gt: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub gte: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub lt: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub lte: ::core::option::Option<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub is_null: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint64FilterInput {
    #[prost(uint64, optional, tag = "1")]
    pub eq: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub ne: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub gt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub gte: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub lt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub lte: ::core::option::Option<u64>,
    #[prost(uint64, repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub is_null: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub is_not_null: ::core::option::Option<u64>,
    #[prost(uint64, repeated, tag = "11")]
    pub between: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, repeated, tag = "12")]
    pub not_between: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub password_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub api_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "11")]
    pub role: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserBasic {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub password_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub api_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "11")]
    pub role: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserConnection {
    #[prost(message, optional, tag = "1")]
    pub page_info: ::core::option::Option<PageInfo>,
    #[prost(message, optional, tag = "2")]
    pub pagination_info: ::core::option::Option<PaginationInfo>,
    #[prost(message, repeated, tag = "3")]
    pub nodes: ::prost::alloc::vec::Vec<User>,
    #[prost(message, repeated, tag = "4")]
    pub edges: ::prost::alloc::vec::Vec<UserEdge>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserEdge {
    #[prost(string, tag = "1")]
    pub cursor: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node: ::core::option::Option<User>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserFilterInput {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "2")]
    pub email: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "3")]
    pub first_name: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "4")]
    pub last_name: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "5")]
    pub password_hash: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "6")]
    pub api_token: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "8")]
    pub updated_at: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<StringFilterInput>,
    #[prost(message, optional, tag = "11")]
    pub role: ::core::option::Option<UserRoleEnumEnumFilterInput>,
    #[prost(message, repeated, tag = "12")]
    pub and: ::prost::alloc::vec::Vec<UserFilterInput>,
    #[prost(message, repeated, tag = "13")]
    pub or: ::prost::alloc::vec::Vec<UserFilterInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserInput {
    #[prost(message, optional, tag = "1")]
    pub filters: ::core::option::Option<UserFilterInput>,
    #[prost(message, optional, tag = "2")]
    pub order_by: ::core::option::Option<UserOrderInput>,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<PaginationInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserInsertInput {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub password_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub api_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "11")]
    pub role: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserOrderInput {
    #[prost(enumeration = "OrderByEnum", optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "2")]
    pub email: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "3")]
    pub first_name: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "4")]
    pub last_name: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "5")]
    pub password_hash: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "6")]
    pub api_token: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "7")]
    pub created_at: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "8")]
    pub updated_at: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "9")]
    pub deleted_at: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "10")]
    pub metadata: ::core::option::Option<i32>,
    #[prost(enumeration = "OrderByEnum", optional, tag = "11")]
    pub role: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRoleEnumEnumFilterInput {
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "1")]
    pub eq: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "2")]
    pub ne: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "3")]
    pub gt: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "4")]
    pub gte: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "5")]
    pub lt: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "6")]
    pub lte: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", repeated, tag = "7")]
    pub is_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", repeated, tag = "8")]
    pub is_not_in: ::prost::alloc::vec::Vec<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "9")]
    pub is_null: ::core::option::Option<i32>,
    #[prost(enumeration = "UserRoleEnumEnum", optional, tag = "10")]
    pub is_not_null: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserUpdateInput {
    #[prost(message, optional, boxed, tag = "1")]
    pub data: ::core::option::Option<::prost::alloc::boxed::Box<UserUpdateInput>>,
    #[prost(message, optional, tag = "2")]
    pub filter: ::core::option::Option<UserFilterInput>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderByEnum {
    Asc = 0,
    Desc = 1,
}
impl OrderByEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OrderByEnum::Asc => "ASC",
            OrderByEnum::Desc => "DESC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASC" => Some(Self::Asc),
            "DESC" => Some(Self::Desc),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserRoleEnumEnum {
    Admin = 0,
    Developer = 1,
    Member = 2,
}
impl UserRoleEnumEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            UserRoleEnumEnum::Admin => "ADMIN",
            UserRoleEnumEnum::Developer => "DEVELOPER",
            UserRoleEnumEnum::Member => "MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADMIN" => Some(Self::Admin),
            "DEVELOPER" => Some(Self::Developer),
            "MEMBER" => Some(Self::Member),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ServiceServer.
    #[async_trait]
    pub trait Service: Send + Sync + 'static {
        async fn user(
            &self,
            request: tonic::Request<super::UserInput>,
        ) -> std::result::Result<tonic::Response<super::UserConnection>, tonic::Status>;
        async fn user_create_one(
            &self,
            request: tonic::Request<super::UserInsertInput>,
        ) -> std::result::Result<tonic::Response<super::UserBasic>, tonic::Status>;
        async fn user_create_batch(
            &self,
            request: tonic::Request<super::UserInsertInput>,
        ) -> std::result::Result<tonic::Response<super::UserBasic>, tonic::Status>;
        async fn user_update(
            &self,
            request: tonic::Request<super::UserUpdateInput>,
        ) -> std::result::Result<tonic::Response<super::UserBasic>, tonic::Status>;
        async fn user_delete(
            &self,
            request: tonic::Request<super::UserFilterInput>,
        ) -> std::result::Result<tonic::Response<super::UserBasic>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ServiceServer<T: Service> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: Service> ServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ServiceServer<T>
    where
        T: Service,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/Service/user" => {
                    #[allow(non_camel_case_types)]
                    struct userSvc<T: Service>(pub Arc<T>);
                    impl<T: Service> tonic::server::UnaryService<super::UserInput>
                    for userSvc<T> {
                        type Response = super::UserConnection;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserInput>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Service>::user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = userSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/Service/userCreateOne" => {
                    #[allow(non_camel_case_types)]
                    struct userCreateOneSvc<T: Service>(pub Arc<T>);
                    impl<T: Service> tonic::server::UnaryService<super::UserInsertInput>
                    for userCreateOneSvc<T> {
                        type Response = super::UserBasic;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserInsertInput>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Service>::user_create_one(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = userCreateOneSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/Service/userCreateBatch" => {
                    #[allow(non_camel_case_types)]
                    struct userCreateBatchSvc<T: Service>(pub Arc<T>);
                    impl<T: Service> tonic::server::UnaryService<super::UserInsertInput>
                    for userCreateBatchSvc<T> {
                        type Response = super::UserBasic;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserInsertInput>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Service>::user_create_batch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = userCreateBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/Service/userUpdate" => {
                    #[allow(non_camel_case_types)]
                    struct userUpdateSvc<T: Service>(pub Arc<T>);
                    impl<T: Service> tonic::server::UnaryService<super::UserUpdateInput>
                    for userUpdateSvc<T> {
                        type Response = super::UserBasic;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserUpdateInput>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Service>::user_update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = userUpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/Service/userDelete" => {
                    #[allow(non_camel_case_types)]
                    struct userDeleteSvc<T: Service>(pub Arc<T>);
                    impl<T: Service> tonic::server::UnaryService<super::UserFilterInput>
                    for userDeleteSvc<T> {
                        type Response = super::UserBasic;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserFilterInput>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Service>::user_delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = userDeleteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Service> Clone for ServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Service> tonic::server::NamedService for ServiceServer<T> {
        const NAME: &'static str = "Service";
    }
}
