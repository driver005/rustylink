// This file is @generated by prost-build.
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetColumnsRequest {
    #[prost(string, optional, tag = "1")]
    pub table_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "3")]
    pub included_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub excluded_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub offset: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetColumnsTableIdordinalPositionRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(int32, tag = "2")]
    pub limit: i32,
    #[prost(int32, tag = "3")]
    pub offset: i32,
    #[prost(string, tag = "4")]
    pub ordinal_position: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub table_id: ::prost::alloc::string::String,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateColumnRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub drop_default: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub default_value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "DefaultValueFormat", optional, tag = "6")]
    pub default_value_format: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub is_identity: ::core::option::Option<bool>,
    #[prost(enumeration = "IdentityGeneration", optional, tag = "8")]
    pub identity_generation: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub is_nullable: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_unique: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "11")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub check: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateColumnRequest {
    #[prost(int32, tag = "1")]
    pub table_id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub default_value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "DefaultValueFormat", optional, tag = "5")]
    pub default_value_format: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_identity: ::core::option::Option<bool>,
    #[prost(enumeration = "IdentityGeneration", optional, tag = "7")]
    pub identity_generation: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub is_nullable: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_primary_key: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_unique: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "11")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub check: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteColumnRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(bool, optional, tag = "2")]
    pub cascade: ::core::option::Option<bool>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetColumnPrivilegesRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "2")]
    pub included_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub excluded_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub offset: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GrantColumnPrivilegeRequest {
    #[prost(string, tag = "1")]
    pub column_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub grantee: ::prost::alloc::string::String,
    #[prost(enumeration = "super::core::PrivilegeType", optional, tag = "3")]
    pub privilege_type: ::core::option::Option<i32>,
    #[prost(bool, tag = "4")]
    pub is_grantable: bool,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeColumnPrivilegeRequest {
    #[prost(string, tag = "1")]
    pub column_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub grantee: ::prost::alloc::string::String,
    #[prost(enumeration = "super::core::PrivilegeType", optional, tag = "3")]
    pub privilege_type: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnResponce {
    #[prost(int32, tag = "1")]
    pub table_id: i32,
    #[prost(string, tag = "2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub table: ::prost::alloc::string::String,
    /// Regex pattern can't be directly represented in protobuf
    #[prost(string, tag = "4")]
    pub id: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub ordinal_position: i32,
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    /// Using Any to represent unknown type
    #[prost(string, tag = "7")]
    pub default_value: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub data_type: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub format: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub is_identity: bool,
    #[prost(enumeration = "IdentityGeneration", optional, tag = "11")]
    pub identity_generation: ::core::option::Option<i32>,
    #[prost(bool, tag = "12")]
    pub is_generated: bool,
    #[prost(bool, tag = "13")]
    pub is_nullable: bool,
    #[prost(bool, tag = "14")]
    pub is_updatable: bool,
    #[prost(bool, tag = "15")]
    pub is_unique: bool,
    #[prost(string, repeated, tag = "16")]
    pub enums: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "17")]
    pub check: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnPrivilegesResponse {
    #[prost(string, tag = "1")]
    pub column_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub relation_schema: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub relation_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub column_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub privileges: ::prost::alloc::vec::Vec<super::core::Privilege>,
}
#[derive(sea_orm::EnumIter, sea_orm::DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IdentityGeneration {
    Always = 0,
    ByDefault = 1,
}
impl IdentityGeneration {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IdentityGeneration::Always => "ALWAYS",
            IdentityGeneration::ByDefault => "BY_DEFAULT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALWAYS" => Some(Self::Always),
            "BY_DEFAULT" => Some(Self::ByDefault),
            _ => None,
        }
    }
}
#[derive(sea_orm::EnumIter, sea_orm::DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DefaultValueFormat {
    Expression = 0,
    Literal = 1,
}
impl DefaultValueFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DefaultValueFormat::Expression => "EXPRESSION",
            DefaultValueFormat::Literal => "LITERAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EXPRESSION" => Some(Self::Expression),
            "LITERAL" => Some(Self::Literal),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod column_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ColumnServer.
    #[async_trait]
    pub trait Column: Send + Sync + 'static {
        async fn get_columns(
            &self,
            request: tonic::Request<super::GetColumnsRequest>,
        ) -> std::result::Result<tonic::Response<super::ColumnResponce>, tonic::Status>;
        async fn get_columns_table_idordinal_position(
            &self,
            request: tonic::Request<super::GetColumnsTableIdordinalPositionRequest>,
        ) -> std::result::Result<tonic::Response<super::ColumnResponce>, tonic::Status>;
        async fn update_column(
            &self,
            request: tonic::Request<super::UpdateColumnRequest>,
        ) -> std::result::Result<tonic::Response<super::ColumnResponce>, tonic::Status>;
        async fn create_column(
            &self,
            request: tonic::Request<super::CreateColumnRequest>,
        ) -> std::result::Result<tonic::Response<super::ColumnResponce>, tonic::Status>;
        async fn delete_column(
            &self,
            request: tonic::Request<super::DeleteColumnRequest>,
        ) -> std::result::Result<tonic::Response<super::ColumnResponce>, tonic::Status>;
        async fn get_column_privileges(
            &self,
            request: tonic::Request<super::GetColumnPrivilegesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ColumnPrivilegesResponse>,
            tonic::Status,
        >;
        async fn grant_column_privilege(
            &self,
            request: tonic::Request<super::GrantColumnPrivilegeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ColumnPrivilegesResponse>,
            tonic::Status,
        >;
        async fn revoke_column_privilege(
            &self,
            request: tonic::Request<super::RevokeColumnPrivilegeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ColumnPrivilegesResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ColumnServer<T: Column> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: Column> ColumnServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ColumnServer<T>
    where
        T: Column,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/column.Column/GetColumns" => {
                    #[allow(non_camel_case_types)]
                    struct GetColumnsSvc<T: Column>(pub Arc<T>);
                    impl<T: Column> tonic::server::UnaryService<super::GetColumnsRequest>
                    for GetColumnsSvc<T> {
                        type Response = super::ColumnResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetColumnsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::get_columns(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetColumnsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/GetColumnsTableIdordinalPosition" => {
                    #[allow(non_camel_case_types)]
                    struct GetColumnsTableIdordinalPositionSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<
                        super::GetColumnsTableIdordinalPositionRequest,
                    > for GetColumnsTableIdordinalPositionSvc<T> {
                        type Response = super::ColumnResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetColumnsTableIdordinalPositionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::get_columns_table_idordinal_position(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetColumnsTableIdordinalPositionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/UpdateColumn" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateColumnSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::UpdateColumnRequest>
                    for UpdateColumnSvc<T> {
                        type Response = super::ColumnResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateColumnRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::update_column(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateColumnSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/CreateColumn" => {
                    #[allow(non_camel_case_types)]
                    struct CreateColumnSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::CreateColumnRequest>
                    for CreateColumnSvc<T> {
                        type Response = super::ColumnResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateColumnRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::create_column(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateColumnSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/DeleteColumn" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteColumnSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::DeleteColumnRequest>
                    for DeleteColumnSvc<T> {
                        type Response = super::ColumnResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteColumnRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::delete_column(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteColumnSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/GetColumnPrivileges" => {
                    #[allow(non_camel_case_types)]
                    struct GetColumnPrivilegesSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::GetColumnPrivilegesRequest>
                    for GetColumnPrivilegesSvc<T> {
                        type Response = super::ColumnPrivilegesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetColumnPrivilegesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::get_column_privileges(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetColumnPrivilegesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/GrantColumnPrivilege" => {
                    #[allow(non_camel_case_types)]
                    struct GrantColumnPrivilegeSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::GrantColumnPrivilegeRequest>
                    for GrantColumnPrivilegeSvc<T> {
                        type Response = super::ColumnPrivilegesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GrantColumnPrivilegeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::grant_column_privilege(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GrantColumnPrivilegeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/column.Column/RevokeColumnPrivilege" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeColumnPrivilegeSvc<T: Column>(pub Arc<T>);
                    impl<
                        T: Column,
                    > tonic::server::UnaryService<super::RevokeColumnPrivilegeRequest>
                    for RevokeColumnPrivilegeSvc<T> {
                        type Response = super::ColumnPrivilegesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeColumnPrivilegeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Column>::revoke_column_privilege(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RevokeColumnPrivilegeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Column> Clone for ColumnServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Column> tonic::server::NamedService for ColumnServer<T> {
        const NAME: &'static str = "column.Column";
    }
}
