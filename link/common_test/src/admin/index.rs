// This file is @generated by prost-build.
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIndexesRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_system_schemas: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "2")]
    pub included_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub excluded_schemas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub offset: ::core::option::Option<i32>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIndexRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexResponce {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub table_id: i32,
    #[prost(string, tag = "3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub number_of_attributes: i32,
    #[prost(int32, tag = "5")]
    pub number_of_key_attributes: i32,
    #[prost(bool, tag = "6")]
    pub is_unique: bool,
    #[prost(bool, tag = "7")]
    pub is_primary: bool,
    #[prost(bool, tag = "8")]
    pub is_exclusion: bool,
    #[prost(bool, tag = "9")]
    pub is_immediate: bool,
    #[prost(bool, tag = "10")]
    pub is_clustered: bool,
    #[prost(bool, tag = "11")]
    pub is_valid: bool,
    #[prost(bool, tag = "12")]
    pub check_xmin: bool,
    #[prost(bool, tag = "13")]
    pub is_ready: bool,
    #[prost(bool, tag = "14")]
    pub is_live: bool,
    #[prost(bool, tag = "15")]
    pub is_replica_identity: bool,
    #[prost(int32, repeated, tag = "16")]
    pub key_attributes: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "17")]
    pub collation: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "18")]
    pub class: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "19")]
    pub options: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, optional, tag = "20")]
    pub index_predicate: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "22")]
    pub index_definition: ::prost::alloc::string::String,
    #[prost(string, tag = "23")]
    pub access_method: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "24")]
    pub index_attributes: ::prost::alloc::vec::Vec<IndexAttribute>,
}
#[derive(sea_orm::FromJsonQueryResult)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexAttribute {
    #[prost(int32, tag = "1")]
    pub attribute_number: i32,
    #[prost(string, tag = "2")]
    pub attribute_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub data_type: ::prost::alloc::string::String,
}
/// Generated server implementations.
pub mod index_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with IndexServer.
    #[async_trait]
    pub trait Index: Send + Sync + 'static {
        async fn get_indexes(
            &self,
            request: tonic::Request<super::GetIndexesRequest>,
        ) -> std::result::Result<tonic::Response<super::IndexResponce>, tonic::Status>;
        async fn get_index(
            &self,
            request: tonic::Request<super::GetIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::IndexResponce>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct IndexServer<T: Index> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: Index> IndexServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for IndexServer<T>
    where
        T: Index,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/index.Index/GetIndexes" => {
                    #[allow(non_camel_case_types)]
                    struct GetIndexesSvc<T: Index>(pub Arc<T>);
                    impl<T: Index> tonic::server::UnaryService<super::GetIndexesRequest>
                    for GetIndexesSvc<T> {
                        type Response = super::IndexResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIndexesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Index>::get_indexes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIndexesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/index.Index/GetIndex" => {
                    #[allow(non_camel_case_types)]
                    struct GetIndexSvc<T: Index>(pub Arc<T>);
                    impl<T: Index> tonic::server::UnaryService<super::GetIndexRequest>
                    for GetIndexSvc<T> {
                        type Response = super::IndexResponce;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Index>::get_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Index> Clone for IndexServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Index> tonic::server::NamedService for IndexServer<T> {
        const NAME: &'static str = "index.Index";
    }
}
