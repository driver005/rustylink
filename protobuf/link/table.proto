syntax = "proto3";

package table;

import "protobuf/link/column.proto";
import "protobuf/link/core.proto";

service Table {
    rpc GetTables(GetTablesRequest) returns (TableResponce) {}
    rpc GetTable(GetTableRequest) returns (TableResponce) {}
    rpc UpdateTable(UpdateTableRequest) returns (TableResponce) {}
    rpc CreateTables(CreateTablesRequest) returns (TableResponce) {}
    rpc DeleteTable(DeleteTableRequest) returns (TableResponce) {}
    rpc GetTablePrivileges(GetTablePrivilegesRequest) returns (TablePrivilegeResponce) {}
    rpc GrantTablePrivileges(GrantTablePrivilegesRequest) returns (TablePrivilegeResponce) {}
    rpc RevokeTablePrivileges(RevokeTablePrivilegesRequest) returns (TablePrivilegeResponce) {}
}

enum ReplicaIdentity {
    DEFAULT = 0;
    INDEX = 1;
    FULL = 2;
    NOTHING = 3;
}

enum RelationKind {
    TABLE = 0;
    VIEW = 1;
    MATERIALIZED_VIEW = 2;
    FOREIGN_TABLE = 3;
    PARTITIONED_TABLE = 4;
}

message GetTableRequest {
    int32 id = 1;
}

message GetTablesRequest {
    optional bool include_system_schemas = 1;
    repeated string included_schemas = 2;
    repeated string excluded_schemas = 3;
    optional int32 limit = 4;
    optional int32 offset = 5;
    optional bool include_columns = 6;
}

message PrimaryKey {
    string name = 1;
}

message UpdateTableRequest {
    int32 id = 1;
    optional string name = 2;
    optional string schema = 3;
    optional bool rls_enabled = 4;
    optional bool rls_forced = 5;
    optional ReplicaIdentity replica_identity = 6;
    optional string replica_identity_index = 7;
    repeated PrimaryKey primary_keys = 8;
    optional string comment = 9;
}

message CreateTablesRequest {
    string name = 1;
    optional string schema = 2;
    optional string comment = 3;
}

message DeleteTableRequest {
    int32 id = 1;
    optional bool cascade = 2;
}


message GetTablePrivilegesRequest {
    optional bool include_system_schemas = 1;
    repeated string included_schemas = 2;
    repeated string excluded_schemas = 3;
    optional int32 limit = 4;
    optional int32 offset = 5;
}

message GrantTablePrivilegesRequest {
    int32 relation_id = 1;
    string grantee = 2;    
    optional core.PrivilegeType privilege_type = 3;
    optional bool is_grantable = 4;
}

message RevokeTablePrivilegesRequest {
    int32 relation_id = 1;
    string grantee = 2;    
    optional core.PrivilegeType privilege_type = 3;
}

message TablePrivilegeResponce {
    int32 relation_id = 1;
    string schema = 2;
    string name = 3;
    optional RelationKind kind = 4;
    repeated core.Privilege privileges = 5;
}

message TableResponce {
    int32 id = 1;
    string schema = 2;
    string name = 3;
    bool rls_enabled = 4;
    bool rls_forced = 5;
    optional ReplicaIdentity replica_identity = 6;
    int64 bytes = 7;
    string size = 8;
    int64 live_rows_estimate = 9;
    int64 dead_rows_estimate = 10;
    optional string comment = 11;
    repeated column.ColumnResponce columns = 12;
    repeated PrimaryKeySchema primary_keys = 13;
    repeated RelationshipOldSchema relationships = 14;
}

message PrimaryKeySchema {
    string schema = 1;
    string table_name = 2;
    string name = 3;
    int32 table_id = 4;
}

message RelationshipOldSchema {
    int32 id = 1;
    string constraint_name = 2;
    string source_schema = 3;
    string source_table_name = 4;
    string source_column_name = 5;
    string target_table_schema = 6;
    string target_table_name = 7;
    string target_column_name = 8;
}