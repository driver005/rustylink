//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use crate::public::entities::*;
use async_graphql::dynamic::*;
use sea_orm::DatabaseConnection;
use seaography::{Builder, BuilderContext};
lazy_static::lazy_static! { static ref CONTEXT : BuilderContext = BuilderContext :: default () ; }
pub fn schema(
	database: DatabaseConnection,
	depth: Option<usize>,
	complexity: Option<usize>,
) -> Result<Schema, SchemaError> {
	let mut builder = Builder::new(&CONTEXT, database.clone());
	seaography::register_entities!(
		builder,
		[
			address,
			analytics_config,
			batch_job,
			cart,
			cart_discounts,
			cart_gift_cards,
			claim_image,
			claim_item,
			claim_item_tags,
			claim_order,
			claim_tag,
			country,
			currency,
			custom_shipping_option,
			customer,
			customer_group,
			customer_group_customers,
			discount,
			discount_condition,
			discount_condition_customer_group,
			discount_condition_product,
			discount_condition_product_collection,
			discount_condition_product_tag,
			discount_condition_product_type,
			discount_regions,
			discount_rule,
			discount_rule_products,
			draft_order,
			fulfillment,
			fulfillment_item,
			fulfillment_provider,
			gift_card,
			gift_card_transaction,
			idempotency_key,
			image,
			invite,
			line_item,
			line_item_adjustment,
			line_item_tax_line,
			money_amount,
			note,
			notification,
			notification_provider,
			oauth,
			onboarding_state,
			order,
			order_discounts,
			order_edit,
			order_gift_cards,
			order_item_change,
			payment,
			payment_collection,
			payment_collection_payments,
			payment_collection_sessions,
			payment_provider,
			payment_session,
			price_list,
			price_list_customer_groups,
			product,
			product_category,
			product_category_product,
			product_collection,
			product_images,
			product_option,
			product_option_value,
			product_sales_channel,
			product_shipping_profile,
			product_tag,
			product_tags,
			product_tax_rate,
			product_type,
			product_type_tax_rate,
			product_variant,
			product_variant_inventory_item,
			product_variant_money_amount,
			publishable_api_key,
			publishable_api_key_sales_channel,
			refund,
			region,
			region_fulfillment_providers,
			region_payment_providers,
			r#return,
			return_item,
			return_reason,
			sales_channel,
			sales_channel_location,
			shipping_method,
			shipping_method_tax_line,
			shipping_option,
			shipping_option_requirement,
			shipping_profile,
			shipping_tax_rate,
			staged_job,
			store,
			store_currencies,
			swap,
			tax_provider,
			tax_rate,
			tracking_link,
			user,
		]
	);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::PaymentCollectionStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::PaymentCollectionTypeEnum>(
		);
	builder.register_enumeration::<crate::public::entities::sea_orm_active_enums::CartTypeEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ClaimItemReasonEnum>(
		);
	builder . register_enumeration :: < crate :: public :: entities :: sea_orm_active_enums :: ClaimOrderFulfillmentStatusEnum > () ;
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ClaimOrderPaymentStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ClaimOrderTypeEnum>(
		);
	builder . register_enumeration :: < crate :: public :: entities :: sea_orm_active_enums :: DiscountConditionOperatorEnum > () ;
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::DiscountConditionTypeEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::DiscountRuleAllocationEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::DiscountRuleTypeEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::DraftOrderStatusEnum>(
		);
	builder.register_enumeration::<crate::public::entities::sea_orm_active_enums::InviteRoleEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::OrderFulfillmentStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::OrderItemChangeTypeEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::OrderPaymentStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::OrderStatusEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::PaymentSessionStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::PriceListStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::PriceListTypeEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ProductStatusEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::RefundReasonEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ReturnStatusEnum>();
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ShippingOptionPriceTypeEnum>(
		);
	builder . register_enumeration :: < crate :: public :: entities :: sea_orm_active_enums :: ShippingOptionRequirementTypeEnum > () ;
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::ShippingProfileTypeEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::SwapFulfillmentStatusEnum>(
		);
	builder
		.register_enumeration::<crate::public::entities::sea_orm_active_enums::SwapPaymentStatusEnum>(
		);
	builder.register_enumeration::<crate::public::entities::sea_orm_active_enums::UserRoleEnum>();
	let schema = builder.schema_builder();
	let schema = if let Some(depth) = depth {
		schema.limit_depth(depth)
	} else {
		schema
	};
	let schema = if let Some(complexity) = complexity {
		schema.limit_complexity(complexity)
	} else {
		schema
	};
	schema.data(database).finish()
}
