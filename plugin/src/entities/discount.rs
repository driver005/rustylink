//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "discount")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	#[sea_orm(unique)]
	pub code: String,
	pub is_dynamic: bool,
	pub rule_id: Option<String>,
	pub is_disabled: bool,
	pub parent_discount_id: Option<String>,
	pub starts_at: DateTimeWithTimeZone,
	pub ends_at: Option<DateTimeWithTimeZone>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub usage_limit: Option<i32>,
	pub usage_count: i32,
	pub valid_duration: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::cart_discounts::Entity")]
	CartDiscounts,
	#[sea_orm(
		belongs_to = "Entity",
		from = "Column::ParentDiscountId",
		to = "Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	SelfRef,
	#[sea_orm(has_many = "super::discount_regions::Entity")]
	DiscountRegions,
	#[sea_orm(
		belongs_to = "super::discount_rule::Entity",
		from = "Column::RuleId",
		to = "super::discount_rule::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DiscountRule,
	#[sea_orm(has_many = "super::line_item_adjustment::Entity")]
	LineItemAdjustment,
	#[sea_orm(has_many = "super::order_discounts::Entity")]
	OrderDiscounts,
}

impl Related<super::cart_discounts::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CartDiscounts.def()
	}
}

impl Related<super::discount_regions::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DiscountRegions.def()
	}
}

impl Related<super::discount_rule::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DiscountRule.def()
	}
}

impl Related<super::line_item_adjustment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::LineItemAdjustment.def()
	}
}

impl Related<super::order_discounts::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::OrderDiscounts.def()
	}
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		super::cart_discounts::Relation::Cart.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::cart_discounts::Relation::Discount.def().rev())
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		super::order_discounts::Relation::Order.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::order_discounts::Relation::Discount.def().rev())
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		super::discount_regions::Relation::Region.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::discount_regions::Relation::Discount.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::cart_discounts::Entity")]
	CartDiscounts,
	#[sea_orm(entity = "Entity", def = "Relation::SelfRef.def()")]
	SelfRef,
	#[sea_orm(entity = "super::discount_regions::Entity")]
	DiscountRegions,
	#[sea_orm(entity = "super::discount_rule::Entity")]
	DiscountRule,
	#[sea_orm(entity = "super::line_item_adjustment::Entity")]
	LineItemAdjustment,
	#[sea_orm(entity = "super::order_discounts::Entity")]
	OrderDiscounts,
	#[sea_orm(entity = "Entity", def = "Relation::SelfRef.def().rev()")]
	SelfRefReverse,
	#[sea_orm(entity = "super::cart::Entity")]
	Cart,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::region::Entity")]
	Region,
}
