//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "product_collection")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub title: String,
	#[sea_orm(unique)]
	pub handle: Option<String>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::discount_condition_product_collection::Entity")]
	DiscountConditionProductCollection,
	#[sea_orm(has_many = "super::product::Entity")]
	Product,
}

impl Related<super::discount_condition_product_collection::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DiscountConditionProductCollection.def()
	}
}

impl Related<super::product::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Product.def()
	}
}

impl Related<super::discount_condition::Entity> for Entity {
	fn to() -> RelationDef {
		super::discount_condition_product_collection::Relation::DiscountCondition.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::discount_condition_product_collection::Relation::ProductCollection.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::discount_condition_product_collection::Entity")]
	DiscountConditionProductCollection,
	#[sea_orm(entity = "super::product::Entity")]
	Product,
	#[sea_orm(entity = "super::discount_condition::Entity")]
	DiscountCondition,
}
