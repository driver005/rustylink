//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "tax_rate")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	#[sea_orm(column_type = "Float", nullable)]
	pub rate: Option<f32>,
	pub code: Option<String>,
	pub name: String,
	pub region_id: String,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::product_tax_rate::Entity")]
	ProductTaxRate,
	#[sea_orm(has_many = "super::product_type_tax_rate::Entity")]
	ProductTypeTaxRate,
	#[sea_orm(
		belongs_to = "super::region::Entity",
		from = "Column::RegionId",
		to = "super::region::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Region,
	#[sea_orm(has_many = "super::shipping_tax_rate::Entity")]
	ShippingTaxRate,
}

impl Related<super::product_tax_rate::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductTaxRate.def()
	}
}

impl Related<super::product_type_tax_rate::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductTypeTaxRate.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::shipping_tax_rate::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ShippingTaxRate.def()
	}
}

impl Related<super::product::Entity> for Entity {
	fn to() -> RelationDef {
		super::product_tax_rate::Relation::Product.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::product_tax_rate::Relation::TaxRate.def().rev())
	}
}

impl Related<super::product_type::Entity> for Entity {
	fn to() -> RelationDef {
		super::product_type_tax_rate::Relation::ProductType.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::product_type_tax_rate::Relation::TaxRate.def().rev())
	}
}

impl Related<super::shipping_option::Entity> for Entity {
	fn to() -> RelationDef {
		super::shipping_tax_rate::Relation::ShippingOption.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::shipping_tax_rate::Relation::TaxRate.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::product_tax_rate::Entity")]
	ProductTaxRate,
	#[sea_orm(entity = "super::product_type_tax_rate::Entity")]
	ProductTypeTaxRate,
	#[sea_orm(entity = "super::region::Entity")]
	Region,
	#[sea_orm(entity = "super::shipping_tax_rate::Entity")]
	ShippingTaxRate,
	#[sea_orm(entity = "super::product::Entity")]
	Product,
	#[sea_orm(entity = "super::product_type::Entity")]
	ProductType,
	#[sea_orm(entity = "super::shipping_option::Entity")]
	ShippingOption,
}
