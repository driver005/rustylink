//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "line_item")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub cart_id: Option<String>,
	pub order_id: Option<String>,
	pub swap_id: Option<String>,
	pub title: String,
	pub description: Option<String>,
	pub thumbnail: Option<String>,
	pub is_giftcard: bool,
	pub should_merge: bool,
	pub allow_discounts: bool,
	pub has_shipping: Option<bool>,
	pub unit_price: i32,
	pub variant_id: Option<String>,
	pub quantity: i32,
	pub fulfilled_quantity: Option<i32>,
	pub returned_quantity: Option<i32>,
	pub shipped_quantity: Option<i32>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub claim_order_id: Option<String>,
	pub is_return: bool,
	pub original_item_id: Option<String>,
	pub order_edit_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::cart::Entity",
		from = "Column::CartId",
		to = "super::cart::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Cart,
	#[sea_orm(has_many = "super::claim_item::Entity")]
	ClaimItem,
	#[sea_orm(
		belongs_to = "super::claim_order::Entity",
		from = "Column::ClaimOrderId",
		to = "super::claim_order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ClaimOrder,
	#[sea_orm(has_many = "super::fulfillment_item::Entity")]
	FulfillmentItem,
	#[sea_orm(
		belongs_to = "Entity",
		from = "Column::OriginalItemId",
		to = "Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	SelfRef,
	#[sea_orm(has_many = "super::line_item_adjustment::Entity")]
	LineItemAdjustment,
	#[sea_orm(has_many = "super::line_item_tax_line::Entity")]
	LineItemTaxLine,
	#[sea_orm(
		belongs_to = "super::order::Entity",
		from = "Column::OrderId",
		to = "super::order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Order,
	#[sea_orm(
		belongs_to = "super::order_edit::Entity",
		from = "Column::OrderEditId",
		to = "super::order_edit::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	OrderEdit,
	#[sea_orm(
		belongs_to = "super::product_variant::Entity",
		from = "Column::VariantId",
		to = "super::product_variant::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ProductVariant,
	#[sea_orm(has_many = "super::return_item::Entity")]
	ReturnItem,
	#[sea_orm(
		belongs_to = "super::swap::Entity",
		from = "Column::SwapId",
		to = "super::swap::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Swap,
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Cart.def()
	}
}

impl Related<super::claim_item::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ClaimItem.def()
	}
}

impl Related<super::claim_order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ClaimOrder.def()
	}
}

impl Related<super::fulfillment_item::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::FulfillmentItem.def()
	}
}

impl Related<super::line_item_adjustment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::LineItemAdjustment.def()
	}
}

impl Related<super::line_item_tax_line::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::LineItemTaxLine.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::order_edit::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::OrderEdit.def()
	}
}

impl Related<super::product_variant::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductVariant.def()
	}
}

impl Related<super::return_item::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ReturnItem.def()
	}
}

impl Related<super::swap::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Swap.def()
	}
}

impl Related<super::fulfillment::Entity> for Entity {
	fn to() -> RelationDef {
		super::fulfillment_item::Relation::Fulfillment.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::fulfillment_item::Relation::LineItem.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::cart::Entity")]
	Cart,
	#[sea_orm(entity = "super::claim_item::Entity")]
	ClaimItem,
	#[sea_orm(entity = "super::claim_order::Entity")]
	ClaimOrder,
	#[sea_orm(entity = "super::fulfillment_item::Entity")]
	FulfillmentItem,
	#[sea_orm(entity = "Entity", def = "Relation::SelfRef.def()")]
	SelfRef,
	#[sea_orm(entity = "super::line_item_adjustment::Entity")]
	LineItemAdjustment,
	#[sea_orm(entity = "super::line_item_tax_line::Entity")]
	LineItemTaxLine,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::order_edit::Entity")]
	OrderEdit,
	#[sea_orm(entity = "super::product_variant::Entity")]
	ProductVariant,
	#[sea_orm(entity = "super::return_item::Entity")]
	ReturnItem,
	#[sea_orm(entity = "super::swap::Entity")]
	Swap,
	#[sea_orm(entity = "Entity", def = "Relation::SelfRef.def().rev()")]
	SelfRefReverse,
	#[sea_orm(entity = "super::fulfillment::Entity")]
	Fulfillment,
}
