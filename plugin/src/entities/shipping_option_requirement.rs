//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use super::sea_orm_active_enums::ShippingOptionRequirementTypeEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "shipping_option_requirement")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub shipping_option_id: String,
	pub r#type: ShippingOptionRequirementTypeEnum,
	pub amount: i32,
	pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::shipping_option::Entity",
		from = "Column::ShippingOptionId",
		to = "super::shipping_option::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ShippingOption,
}

impl Related<super::shipping_option::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ShippingOption.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::shipping_option::Entity")]
	ShippingOption,
}
