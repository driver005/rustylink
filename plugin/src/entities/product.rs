//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use super::sea_orm_active_enums::ProductStatusEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "product")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub title: String,
	pub subtitle: Option<String>,
	pub description: Option<String>,
	#[sea_orm(unique)]
	pub handle: Option<String>,
	pub is_giftcard: bool,
	pub thumbnail: Option<String>,
	pub weight: Option<i32>,
	pub length: Option<i32>,
	pub height: Option<i32>,
	pub width: Option<i32>,
	pub hs_code: Option<String>,
	pub origin_country: Option<String>,
	pub mid_code: Option<String>,
	pub material: Option<String>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub collection_id: Option<String>,
	pub type_id: Option<String>,
	pub discountable: bool,
	pub status: ProductStatusEnum,
	pub external_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::discount_condition_product::Entity")]
	DiscountConditionProduct,
	#[sea_orm(has_many = "super::discount_rule_products::Entity")]
	DiscountRuleProducts,
	#[sea_orm(has_many = "super::product_category_product::Entity")]
	ProductCategoryProduct,
	#[sea_orm(
		belongs_to = "super::product_collection::Entity",
		from = "Column::CollectionId",
		to = "super::product_collection::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ProductCollection,
	#[sea_orm(has_many = "super::product_images::Entity")]
	ProductImages,
	#[sea_orm(has_many = "super::product_option::Entity")]
	ProductOption,
	#[sea_orm(has_many = "super::product_tags::Entity")]
	ProductTags,
	#[sea_orm(has_many = "super::product_tax_rate::Entity")]
	ProductTaxRate,
	#[sea_orm(
		belongs_to = "super::product_type::Entity",
		from = "Column::TypeId",
		to = "super::product_type::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ProductType,
	#[sea_orm(has_many = "super::product_variant::Entity")]
	ProductVariant,
}

impl Related<super::discount_condition_product::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DiscountConditionProduct.def()
	}
}

impl Related<super::discount_rule_products::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DiscountRuleProducts.def()
	}
}

impl Related<super::product_category_product::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductCategoryProduct.def()
	}
}

impl Related<super::product_collection::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductCollection.def()
	}
}

impl Related<super::product_images::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductImages.def()
	}
}

impl Related<super::product_option::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductOption.def()
	}
}

impl Related<super::product_tags::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductTags.def()
	}
}

impl Related<super::product_tax_rate::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductTaxRate.def()
	}
}

impl Related<super::product_type::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductType.def()
	}
}

impl Related<super::product_variant::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductVariant.def()
	}
}

impl Related<super::discount_condition::Entity> for Entity {
	fn to() -> RelationDef {
		super::discount_condition_product::Relation::DiscountCondition.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::discount_condition_product::Relation::Product.def().rev())
	}
}

impl Related<super::discount_rule::Entity> for Entity {
	fn to() -> RelationDef {
		super::discount_rule_products::Relation::DiscountRule.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::discount_rule_products::Relation::Product.def().rev())
	}
}

impl Related<super::image::Entity> for Entity {
	fn to() -> RelationDef {
		super::product_images::Relation::Image.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::product_images::Relation::Product.def().rev())
	}
}

impl Related<super::product_tag::Entity> for Entity {
	fn to() -> RelationDef {
		super::product_tags::Relation::ProductTag.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::product_tags::Relation::Product.def().rev())
	}
}

impl Related<super::tax_rate::Entity> for Entity {
	fn to() -> RelationDef {
		super::product_tax_rate::Relation::TaxRate.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::product_tax_rate::Relation::Product.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::discount_condition_product::Entity")]
	DiscountConditionProduct,
	#[sea_orm(entity = "super::discount_rule_products::Entity")]
	DiscountRuleProducts,
	#[sea_orm(entity = "super::product_category_product::Entity")]
	ProductCategoryProduct,
	#[sea_orm(entity = "super::product_collection::Entity")]
	ProductCollection,
	#[sea_orm(entity = "super::product_images::Entity")]
	ProductImages,
	#[sea_orm(entity = "super::product_option::Entity")]
	ProductOption,
	#[sea_orm(entity = "super::product_tags::Entity")]
	ProductTags,
	#[sea_orm(entity = "super::product_tax_rate::Entity")]
	ProductTaxRate,
	#[sea_orm(entity = "super::product_type::Entity")]
	ProductType,
	#[sea_orm(entity = "super::product_variant::Entity")]
	ProductVariant,
	#[sea_orm(entity = "super::discount_condition::Entity")]
	DiscountCondition,
	#[sea_orm(entity = "super::discount_rule::Entity")]
	DiscountRule,
	#[sea_orm(entity = "super::image::Entity")]
	Image,
	#[sea_orm(entity = "super::product_tag::Entity")]
	ProductTag,
	#[sea_orm(entity = "super::tax_rate::Entity")]
	TaxRate,
}
