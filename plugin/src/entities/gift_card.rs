//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "gift_card")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	#[sea_orm(unique)]
	pub code: String,
	pub value: i32,
	pub balance: i32,
	pub region_id: String,
	pub order_id: Option<String>,
	pub is_disabled: bool,
	pub ends_at: Option<DateTimeWithTimeZone>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	#[sea_orm(column_type = "Float", nullable)]
	pub tax_rate: Option<f32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::cart_gift_cards::Entity")]
	CartGiftCards,
	#[sea_orm(has_many = "super::gift_card_transaction::Entity")]
	GiftCardTransaction,
	#[sea_orm(
		belongs_to = "super::order::Entity",
		from = "Column::OrderId",
		to = "super::order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Order,
	#[sea_orm(has_many = "super::order_gift_cards::Entity")]
	OrderGiftCards,
	#[sea_orm(
		belongs_to = "super::region::Entity",
		from = "Column::RegionId",
		to = "super::region::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Region,
}

impl Related<super::cart_gift_cards::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CartGiftCards.def()
	}
}

impl Related<super::gift_card_transaction::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::GiftCardTransaction.def()
	}
}

impl Related<super::order_gift_cards::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::OrderGiftCards.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		super::cart_gift_cards::Relation::Cart.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::cart_gift_cards::Relation::GiftCard.def().rev())
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		super::order_gift_cards::Relation::Order.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::order_gift_cards::Relation::GiftCard.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::cart_gift_cards::Entity")]
	CartGiftCards,
	#[sea_orm(entity = "super::gift_card_transaction::Entity")]
	GiftCardTransaction,
	#[sea_orm(entity = "super::order_gift_cards::Entity")]
	Order,
	#[sea_orm(entity = "super::region::Entity")]
	OrderGiftCards,
	#[sea_orm(entity = "super::cart::Entity")]
	Region,
	#[sea_orm(entity = "super::order::Entity")]
	Cart,
}
