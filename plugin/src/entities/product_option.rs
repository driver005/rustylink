//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "product_option")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub title: String,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub product_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::product::Entity",
		from = "Column::ProductId",
		to = "super::product::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Product,
	#[sea_orm(has_many = "super::product_option_value::Entity")]
	ProductOptionValue,
}

impl Related<super::product::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Product.def()
	}
}

impl Related<super::product_option_value::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ProductOptionValue.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::product::Entity")]
	Product,
	#[sea_orm(entity = "super::product_option_value::Entity")]
	ProductOptionValue,
}
