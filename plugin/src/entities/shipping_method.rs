//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "shipping_method")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub shipping_option_id: String,
	pub order_id: Option<String>,
	pub cart_id: Option<String>,
	pub swap_id: Option<String>,
	#[sea_orm(unique)]
	pub return_id: Option<String>,
	pub price: i32,
	#[sea_orm(column_type = "JsonBinary")]
	pub data: Json,
	pub claim_order_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::cart::Entity",
		from = "Column::CartId",
		to = "super::cart::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Cart,
	#[sea_orm(
		belongs_to = "super::claim_order::Entity",
		from = "Column::ClaimOrderId",
		to = "super::claim_order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ClaimOrder,
	#[sea_orm(
		belongs_to = "super::order::Entity",
		from = "Column::OrderId",
		to = "super::order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Order,
	#[sea_orm(
		belongs_to = "super::r#return::Entity",
		from = "Column::ReturnId",
		to = "super::r#return::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Return,
	#[sea_orm(has_many = "super::shipping_method_tax_line::Entity")]
	ShippingMethodTaxLine,
	#[sea_orm(
		belongs_to = "super::shipping_option::Entity",
		from = "Column::ShippingOptionId",
		to = "super::shipping_option::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ShippingOption,
	#[sea_orm(
		belongs_to = "super::swap::Entity",
		from = "Column::SwapId",
		to = "super::swap::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Swap,
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Cart.def()
	}
}

impl Related<super::claim_order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ClaimOrder.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::r#return::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Return.def()
	}
}

impl Related<super::shipping_method_tax_line::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ShippingMethodTaxLine.def()
	}
}

impl Related<super::shipping_option::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ShippingOption.def()
	}
}

impl Related<super::swap::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Swap.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::cart::Entity")]
	Cart,
	#[sea_orm(entity = "super::claim_order::Entity")]
	ClaimOrder,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::r#return::Entity")]
	Return,
	#[sea_orm(entity = "super::shipping_method_tax_line::Entity")]
	ShippingMethodTaxLine,
	#[sea_orm(entity = "super::shipping_option::Entity")]
	ShippingOption,
	#[sea_orm(entity = "super::swap::Entity")]
	Swap,
}
