//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "customer")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub email: String,
	pub first_name: Option<String>,
	pub last_name: Option<String>,
	#[sea_orm(unique)]
	pub billing_address_id: Option<String>,
	pub password_hash: Option<String>,
	pub phone: Option<String>,
	pub has_account: bool,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::address::Entity",
		from = "Column::BillingAddressId",
		to = "super::address::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Address,
	#[sea_orm(has_many = "super::cart::Entity")]
	Cart,
	#[sea_orm(has_many = "super::customer_group_customers::Entity")]
	CustomerGroupCustomers,
	#[sea_orm(has_many = "super::notification::Entity")]
	Notification,
	#[sea_orm(has_many = "super::order::Entity")]
	Order,
}

impl Related<super::address::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Address.def()
	}
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Cart.def()
	}
}

impl Related<super::customer_group_customers::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CustomerGroupCustomers.def()
	}
}

impl Related<super::notification::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Notification.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::customer_group::Entity> for Entity {
	fn to() -> RelationDef {
		super::customer_group_customers::Relation::CustomerGroup.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::customer_group_customers::Relation::Customer.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::address::Entity")]
	Address,
	#[sea_orm(entity = "super::cart::Entity")]
	Cart,
	#[sea_orm(entity = "super::customer_group_customers::Entity")]
	CustomerGroupCustomers,
	#[sea_orm(entity = "super::notification::Entity")]
	Notification,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::customer_group::Entity")]
	CustomerGroup,
}
