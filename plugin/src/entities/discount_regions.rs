//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "discount_regions")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub discount_id: String,
	#[sea_orm(primary_key, auto_increment = false)]
	pub region_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::discount::Entity",
		from = "Column::DiscountId",
		to = "super::discount::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	Discount,
	#[sea_orm(
		belongs_to = "super::region::Entity",
		from = "Column::RegionId",
		to = "super::region::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	Region,
}

impl Related<super::discount::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Discount.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::discount::Entity")]
	Discount,
	#[sea_orm(entity = "super::region::Entity")]
	Region,
}
