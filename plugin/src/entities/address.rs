//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "address")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub customer_id: Option<String>,
	pub company: Option<String>,
	pub first_name: Option<String>,
	pub last_name: Option<String>,
	pub address_1: Option<String>,
	pub address_2: Option<String>,
	pub city: Option<String>,
	pub country_code: Option<String>,
	pub province: Option<String>,
	pub postal_code: Option<String>,
	pub phone: Option<String>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	pub deleted_at: Option<DateTimeWithTimeZone>,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::claim_order::Entity")]
	ClaimOrder,
	#[sea_orm(
		belongs_to = "super::country::Entity",
		from = "Column::CountryCode",
		to = "super::country::Column::Iso2",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Country,
	#[sea_orm(
		belongs_to = "super::customer::Entity",
		from = "Column::CustomerId",
		to = "super::customer::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Customer,
	#[sea_orm(has_many = "super::swap::Entity")]
	Swap,
}

impl Related<super::claim_order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ClaimOrder.def()
	}
}

impl Related<super::country::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Country.def()
	}
}

impl Related<super::customer::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Customer.def()
	}
}

impl Related<super::swap::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Swap.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::claim_order::Entity")]
	ClaimOrder,
	#[sea_orm(entity = "super::country::Entity")]
	Country,
	#[sea_orm(entity = "super::customer::Entity")]
	Customer,
	#[sea_orm(entity = "super::swap::Entity")]
	Swap,
}
