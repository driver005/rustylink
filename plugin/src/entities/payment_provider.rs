//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "payment_provider")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub is_installed: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::region_payment_providers::Entity")]
	RegionPaymentProviders,
}

impl Related<super::region_payment_providers::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::RegionPaymentProviders.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		super::region_payment_providers::Relation::Region.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::region_payment_providers::Relation::PaymentProvider.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::region_payment_providers::Entity")]
	RegionPaymentProviders,
	#[sea_orm(entity = "super::region::Entity")]
	Region,
}
