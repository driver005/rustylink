//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "payment")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	#[sea_orm(unique)]
	pub swap_id: Option<String>,
	#[sea_orm(unique)]
	pub cart_id: Option<String>,
	pub order_id: Option<String>,
	pub amount: i32,
	pub currency_code: String,
	pub amount_refunded: i32,
	pub provider_id: String,
	#[sea_orm(column_type = "JsonBinary")]
	pub data: Json,
	pub captured_at: Option<DateTimeWithTimeZone>,
	pub canceled_at: Option<DateTimeWithTimeZone>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub idempotency_key: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::cart::Entity",
		from = "Column::CartId",
		to = "super::cart::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Cart,
	#[sea_orm(
		belongs_to = "super::currency::Entity",
		from = "Column::CurrencyCode",
		to = "super::currency::Column::Code",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Currency,
	#[sea_orm(
		belongs_to = "super::order::Entity",
		from = "Column::OrderId",
		to = "super::order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Order,
	#[sea_orm(has_many = "super::payment_collection_payments::Entity")]
	PaymentCollectionPayments,
	#[sea_orm(has_many = "super::refund::Entity")]
	Refund,
	#[sea_orm(
		belongs_to = "super::swap::Entity",
		from = "Column::SwapId",
		to = "super::swap::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Swap,
}

impl Related<super::cart::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Cart.def()
	}
}

impl Related<super::currency::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Currency.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::payment_collection_payments::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::PaymentCollectionPayments.def()
	}
}

impl Related<super::refund::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Refund.def()
	}
}

impl Related<super::swap::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Swap.def()
	}
}

impl Related<super::payment_collection::Entity> for Entity {
	fn to() -> RelationDef {
		super::payment_collection_payments::Relation::PaymentCollection.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::payment_collection_payments::Relation::Payment.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::cart::Entity")]
	Cart,
	#[sea_orm(entity = "super::currency::Entity")]
	Currency,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::payment_collection_payments::Entity")]
	PaymentCollectionPayments,
	#[sea_orm(entity = "super::refund::Entity")]
	Refund,
	#[sea_orm(entity = "super::swap::Entity")]
	Swap,
	#[sea_orm(entity = "super::payment_collection::Entity")]
	PaymentCollection,
}
