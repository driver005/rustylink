//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "product_sales_channel")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub product_id: String,
	#[sea_orm(primary_key, auto_increment = false)]
	pub sales_channel_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::sales_channel::Entity",
		from = "Column::SalesChannelId",
		to = "super::sales_channel::Column::Id",
		on_update = "Cascade",
		on_delete = "Cascade"
	)]
	SalesChannel,
}

impl Related<super::sales_channel::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::SalesChannel.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::sales_channel::Entity")]
	SalesChannel,
}
