//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "currency")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub code: String,
	pub symbol: String,
	pub symbol_native: String,
	pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::money_amount::Entity")]
	MoneyAmount,
	#[sea_orm(has_many = "super::order::Entity")]
	Order,
	#[sea_orm(has_many = "super::payment::Entity")]
	Payment,
	#[sea_orm(has_many = "super::region::Entity")]
	Region,
	#[sea_orm(has_many = "super::store::Entity")]
	Store,
	#[sea_orm(has_many = "super::store_currencies::Entity")]
	StoreCurrencies,
}

impl Related<super::money_amount::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::MoneyAmount.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::payment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Payment.def()
	}
}

impl Related<super::region::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Region.def()
	}
}

impl Related<super::store_currencies::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::StoreCurrencies.def()
	}
}

impl Related<super::store::Entity> for Entity {
	fn to() -> RelationDef {
		super::store_currencies::Relation::Store.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::store_currencies::Relation::Currency.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::money_amount::Entity")]
	MoneyAmount,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::payment::Entity")]
	Payment,
	#[sea_orm(entity = "super::region::Entity")]
	Region,
	#[sea_orm(entity = "super::store_currencies::Entity")]
	Store,
	#[sea_orm(entity = "super::store::Entity")]
	StoreCurrencies,
}
