//! `SeaORM` Entity, @generated by sea-orm-codegen 0.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "fulfillment")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: String,
	pub swap_id: Option<String>,
	pub order_id: Option<String>,
	#[sea_orm(column_type = "JsonBinary")]
	pub tracking_numbers: Json,
	#[sea_orm(column_type = "JsonBinary")]
	pub data: Json,
	pub shipped_at: Option<DateTimeWithTimeZone>,
	pub canceled_at: Option<DateTimeWithTimeZone>,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: DateTimeWithTimeZone,
	#[sea_orm(column_type = "JsonBinary", nullable)]
	pub metadata: Option<Json>,
	pub idempotency_key: Option<String>,
	pub provider_id: Option<String>,
	pub claim_order_id: Option<String>,
	pub no_notification: Option<bool>,
	pub location_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::claim_order::Entity",
		from = "Column::ClaimOrderId",
		to = "super::claim_order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	ClaimOrder,
	#[sea_orm(has_many = "super::fulfillment_item::Entity")]
	FulfillmentItem,
	#[sea_orm(
		belongs_to = "super::fulfillment_provider::Entity",
		from = "Column::ProviderId",
		to = "super::fulfillment_provider::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	FulfillmentProvider,
	#[sea_orm(
		belongs_to = "super::order::Entity",
		from = "Column::OrderId",
		to = "super::order::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Order,
	#[sea_orm(
		belongs_to = "super::swap::Entity",
		from = "Column::SwapId",
		to = "super::swap::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Swap,
	#[sea_orm(has_many = "super::tracking_link::Entity")]
	TrackingLink,
}

impl Related<super::claim_order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ClaimOrder.def()
	}
}

impl Related<super::fulfillment_item::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::FulfillmentItem.def()
	}
}

impl Related<super::fulfillment_provider::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::FulfillmentProvider.def()
	}
}

impl Related<super::order::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Order.def()
	}
}

impl Related<super::swap::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Swap.def()
	}
}

impl Related<super::tracking_link::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TrackingLink.def()
	}
}

impl Related<super::line_item::Entity> for Entity {
	fn to() -> RelationDef {
		super::fulfillment_item::Relation::LineItem.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::fulfillment_item::Relation::Fulfillment.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
	#[sea_orm(entity = "super::claim_order::Entity")]
	ClaimOrder,
	#[sea_orm(entity = "super::fulfillment_item::Entity")]
	FulfillmentItem,
	#[sea_orm(entity = "super::fulfillment_provider::Entity")]
	FulfillmentProvider,
	#[sea_orm(entity = "super::order::Entity")]
	Order,
	#[sea_orm(entity = "super::swap::Entity")]
	Swap,
	#[sea_orm(entity = "super::tracking_link::Entity")]
	TrackingLink,
	#[sea_orm(entity = "super::line_item::Entity")]
	LineItem,
}
