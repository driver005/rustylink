//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "fork_type")]
pub enum ForkType {
	#[sea_orm(string_value = "DIFFERENT_TASK")]
	DifferentTask,
	#[sea_orm(string_value = "SAME_TASK")]
	SameTask,
	#[sea_orm(string_value = "SAME_TASK_SUB_WORKFLOW")]
	SameTaskSubWorkflow,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "idempotency_strategy")]
pub enum IdempotencyStrategy {
	#[sea_orm(string_value = "FAIL")]
	Fail,
	#[sea_orm(string_value = "RUNNING_EXISTING")]
	RunningExisting,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "operation_type")]
pub enum OperationType {
	#[sea_orm(string_value = "DELETE")]
	Delete,
	#[sea_orm(string_value = "INSERT")]
	Insert,
	#[sea_orm(string_value = "SELECT")]
	Select,
	#[sea_orm(string_value = "Update")]
	Update,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "retry_logic")]
pub enum RetryLogic {
	#[sea_orm(string_value = "EXPONENTIAL_BACKOFF")]
	ExponentialBackoff,
	#[sea_orm(string_value = "FIXED")]
	Fixed,
	#[sea_orm(string_value = "LINEAR_BACKOFF")]
	LinearBackoff,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "task_status")]
pub enum TaskStatus {
	#[sea_orm(string_value = "CANCELED")]
	Canceled,
	#[sea_orm(string_value = "COMPLETED")]
	Completed,
	#[sea_orm(string_value = "COMPLETED_WITH_ERRORS")]
	CompletedWithErrors,
	#[sea_orm(string_value = "FAILED")]
	Failed,
	#[sea_orm(string_value = "FAILED_WITH_TERMINAL_ERROR")]
	FailedWithTerminalError,
	#[sea_orm(string_value = "IN_PROGRESS")]
	InProgress,
	#[sea_orm(string_value = "SCHEDULED")]
	Scheduled,
	#[sea_orm(string_value = "SKIPPED")]
	Skipped,
	#[sea_orm(string_value = "TIMED_OUT")]
	TimedOut,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "task_termination_status")]
pub enum TaskTerminationStatus {
	#[sea_orm(string_value = "COMPLETED")]
	Completed,
	#[sea_orm(string_value = "FAILED")]
	Failed,
	#[sea_orm(string_value = "TERMINATED")]
	Terminated,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "task_type")]
pub enum TaskType {
	#[sea_orm(string_value = "BUISSNESS_RULE")]
	BuissnessRule,
	#[sea_orm(string_value = "DO_WHILE")]
	DoWhile,
	#[sea_orm(string_value = "DYNAMIC")]
	Dynamic,
	#[sea_orm(string_value = "EVENT")]
	Event,
	#[sea_orm(string_value = "EXCLUSIVE_JOIN")]
	ExclusiveJoin,
	#[sea_orm(string_value = "FORK_JOIN")]
	ForkJoin,
	#[sea_orm(string_value = "FORK_JOIN_DYNAMIC")]
	ForkJoinDynamic,
	#[sea_orm(string_value = "GET_SIGNED_JWT")]
	GetSignedJwt,
	#[sea_orm(string_value = "HTTP")]
	Http,
	#[sea_orm(string_value = "HUMAN")]
	Human,
	#[sea_orm(string_value = "INLINE")]
	Inline,
	#[sea_orm(string_value = "JOIN")]
	Join,
	#[sea_orm(string_value = "JSON_JQ_TRANSFORM")]
	JsonJqTransform,
	#[sea_orm(string_value = "KAFKA_PUBLISH")]
	KafkaPublish,
	#[sea_orm(string_value = "SET_VARIABLE")]
	SetVariable,
	#[sea_orm(string_value = "SIMPLE")]
	Simple,
	#[sea_orm(string_value = "SQL_TASK")]
	SqlTask,
	#[sea_orm(string_value = "START_WORKFLOW")]
	StartWorkflow,
	#[sea_orm(string_value = "SUB_WORKFLOW")]
	SubWorkflow,
	#[sea_orm(string_value = "SWITCH")]
	Switch,
	#[sea_orm(string_value = "TERMINATE_TASK")]
	TerminateTask,
	#[sea_orm(string_value = "TERMINATE_WORKFLOW")]
	TerminateWorkflow,
	#[sea_orm(string_value = "UPDATE_SECRET")]
	UpdateSecret,
	#[sea_orm(string_value = "UPDATE_TASK")]
	UpdateTask,
	#[sea_orm(string_value = "USER_DEFINED")]
	UserDefined,
	#[sea_orm(string_value = "WAIT")]
	Wait,
	#[sea_orm(string_value = "WAIT_FOR_WEBHOOK")]
	WaitForWebhook,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "timeout_policy")]
pub enum TimeoutPolicy {
	#[sea_orm(string_value = "ALERT_ONLY")]
	AlertOnly,
	#[sea_orm(string_value = "RETRY")]
	Retry,
	#[sea_orm(string_value = "TIMED_OUT_WF")]
	TimedOutWf,
}
