//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "taskconfig")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub task_id: String,
	#[sea_orm(column_type = "JsonBinary")]
	pub configuration: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::buissnessrule::Entity")]
	Buissnessrule,
	#[sea_orm(has_many = "super::dowhile::Entity")]
	Dowhile,
	#[sea_orm(has_many = "super::dynamic::Entity")]
	Dynamic,
	#[sea_orm(has_many = "super::event::Entity")]
	Event,
	#[sea_orm(has_many = "super::taskmodel::Entity")]
	Taskmodel,
}

impl Related<super::buissnessrule::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Buissnessrule.def()
	}
}

impl Related<super::dowhile::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Dowhile.def()
	}
}

impl Related<super::dynamic::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Dynamic.def()
	}
}

impl Related<super::event::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Event.def()
	}
}

impl Related<super::taskmodel::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Taskmodel.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
